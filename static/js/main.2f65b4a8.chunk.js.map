{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberColor","RouletteNumberButton","number","onClick","backgroundColor","color","Red","Black","hoverBackgroundColor","_hover","width","height","borderRadius","value","App","rouletteNumbers","Green","useState","calledNumbers","setCalledNumbers","appendToCalled","cn","time","Date","curr","showNumber","setShowNumber","getCountByColor","filter","x","length","getCountByModulo","modulo","shouldEqual","parseInt","getCountByRange","start","end","getPercentageOfTotal","count","Math","round","numberOfBets","setNumberOfBets","startingBet","setStartingBet","importInputRef","createRef","flexDir","justifyContent","alignItems","paddingX","paddingY","marginLeft","fontSize","ml","fontWeight","variant","size","mr","colorScheme","leftIcon","current","click","onImport","type","accept","onChange","e","target","files","file","reader","FileReader","onload","parsed","result","split","map","_parsed","JSON","parse","array","sort","a","b","getTime","idx","y","indexOf","readAsText","loadFile","ref","display","stringedCalledNumbers","stringify","join","elem","document","createElement","Blob","href","URL","createObjectURL","download","toISOString","body","appendChild","onExport","maxWidth","flex","alignSelf","padding","mt","templateRows","templateColumns","gap","rowSpan","colSpan","allowMultiple","minW","placeholder","maxW","textAlign","mx","pointerEvents","children","sum","i","totalNeeded","mb","columns","pr","maxH","overflowY","slice","reverse","toString","borderLeft","margin","marginInlineStart","isNumeric","borderTopWidth","transform","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ForceDarkMode","props","useColorMode","colorMode","toggleColorMode","useEffect","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2f65b4a8.chunk.js","sourcesContent":["import { Button, Text, Flex, HStack, Box, SimpleGrid, Grid, GridItem, Table, Thead, Td, Tbody, Tr, Th, Heading, ButtonGroup, Accordion, AccordionItem, AccordionButton, AccordionIcon, AccordionPanel, Input, InputGroup, InputLeftElement } from '@chakra-ui/react';\nimport { FaFileImport, FaFileExport, FaEyeSlash, FaEye, FaCalculator } from \"react-icons/fa\";\nimport { GiCartwheel } from \"react-icons/gi\";\nimport { BsCircleHalf, BsSquareHalf, BsTriangleHalf } from \"react-icons/bs\"\nimport { AiOutlineBorderBottom, AiOutlineBorderHorizontal, AiOutlineBorderLeft, AiOutlineBorderRight, AiOutlineBorderTop, AiOutlineBorderVerticle } from \"react-icons/ai\";\nimport React, { createRef, useState } from 'react';\nimport './App.css';\n\nenum NumberColor {\n  Red,\n  Black,\n  Green\n}\n\ntype RouletteNumber = {\n  value: string,\n  color: NumberColor\n}\n\ntype CalledNumber = {\n  time: Date,\n  number: RouletteNumber\n}\n\ntype RouletteNumberButtonProps = {\n  number: RouletteNumber,\n  onClick: (value: RouletteNumber) => void\n}\nconst RouletteNumberButton = ({number, onClick}: RouletteNumberButtonProps) => {\n  const backgroundColor = number.color === NumberColor.Red\n    ? \"red\"\n    : number.color === NumberColor.Black\n      ? \"black\"\n      : \"green\";\n  \n  const hoverBackgroundColor = number.color === NumberColor.Red\n    ? \"red.500\"\n    : number.color === NumberColor.Black\n      ? \"blackAlpha.600\"\n      : \"green.500\";\n  \n  return (\n    <Button\n      backgroundColor={backgroundColor}\n      _hover={{backgroundColor: hoverBackgroundColor}}\n      color=\"white\"\n      width=\"50px\"\n      height=\"100%\"\n      borderRadius=\"sm\"\n      onClick={() => onClick(number)}\n    >\n      {number.value}\n    </Button>\n  )\n}\n\nconst App = () => {\n  const rouletteNumbers: RouletteNumber[][] = [\n    // Top row\n    [\n      { value: \"00\", color: NumberColor.Green },\n      { value: \"3\", color: NumberColor.Red},\n      { value: \"6\", color: NumberColor.Black},\n      { value: \"9\", color: NumberColor.Red},\n      { value: \"12\", color: NumberColor.Red},\n      { value: \"15\", color: NumberColor.Black},\n      { value: \"18\", color: NumberColor.Red},\n      { value: \"21\", color: NumberColor.Red},\n      { value: \"24\", color: NumberColor.Black},\n      { value: \"27\", color: NumberColor.Red},\n      { value: \"30\", color: NumberColor.Red},\n      { value: \"33\", color: NumberColor.Black},\n      { value: \"36\", color: NumberColor.Red}\n    ],\n\n    // Mid row\n    [\n      { value: \"2\", color: NumberColor.Black},\n      { value: \"5\", color: NumberColor.Red},\n      { value: \"8\", color: NumberColor.Black},\n      { value: \"11\", color: NumberColor.Black},\n      { value: \"14\", color: NumberColor.Red},\n      { value: \"17\", color: NumberColor.Black},\n      { value: \"20\", color: NumberColor.Black},\n      { value: \"23\", color: NumberColor.Red},\n      { value: \"26\", color: NumberColor.Black},\n      { value: \"29\", color: NumberColor.Black},\n      { value: \"32\", color: NumberColor.Red},\n      { value: \"35\", color: NumberColor.Black}\n    ],\n\n    // Bot row\n    [\n      { value: \"0\", color: NumberColor.Green },\n      { value: \"1\", color: NumberColor.Red},\n      { value: \"4\", color: NumberColor.Black},\n      { value: \"7\", color: NumberColor.Red},\n      { value: \"10\", color: NumberColor.Black},\n      { value: \"13\", color: NumberColor.Black},\n      { value: \"16\", color: NumberColor.Red},\n      { value: \"19\", color: NumberColor.Red},\n      { value: \"22\", color: NumberColor.Black},\n      { value: \"25\", color: NumberColor.Red},\n      { value: \"28\", color: NumberColor.Black},\n      { value: \"31\", color: NumberColor.Black},\n      { value: \"34\", color: NumberColor.Red}\n    ]\n  ];\n\n  const [calledNumbers, setCalledNumbers] = useState<CalledNumber[]>([]);\n  const appendToCalled = (number: RouletteNumber) => {\n    var cn: CalledNumber = {\n      time: new Date(),\n      number: number\n    }\n    setCalledNumbers(curr => [...curr, cn]);\n  }\n\n  const [showNumber, setShowNumber] = useState(true);\n\n  const getCountByColor = (color: NumberColor) => {\n    return calledNumbers.filter(x => x.number.color === color).length;\n  }\n\n  const getCountByModulo = (modulo: number, shouldEqual: number) => {\n    return calledNumbers.filter(x => parseInt(x.number.value) > 0 && parseInt(x.number.value) % modulo === shouldEqual).length;\n  }\n\n  const getCountByRange = (start: number, end: number) => {\n    return calledNumbers.filter(x => parseInt(x.number.value) >= start && parseInt(x.number.value) <= end).length;\n  }\n\n  const getPercentageOfTotal = (count: number) => {\n    return Math.round((count / calledNumbers.length) * 10000) / 100;\n  }\n\n  const [numberOfBets, setNumberOfBets] = useState<number>(0);\n  const [startingBet, setStartingBet] = useState<number>(0);\n  const totalNeeded = () => {\n    var sum = startingBet;\n    for (var i = 1; i <= numberOfBets; i++) {\n      sum *= 2;\n    }\n\n    return sum - startingBet;\n  }\n\n  const onImport = () => {\n    importInputRef.current?.click();\n  }\n\n  const onExport = () => {\n    var stringedCalledNumbers = calledNumbers.map(x => JSON.stringify(x)).join(\"~\");\n    \n    const elem = document.createElement(\"a\");\n    const file = new Blob(\n      [stringedCalledNumbers],\n      {type : \"text/plain\"}\n    );\n    elem.href = URL.createObjectURL(file);\n    elem.download = `rlte-${new Date().toISOString()}.txt`;\n    document.body.appendChild(elem);\n    elem.click();\n  }\n  const loadFile = (e: any) => {\n    if (e.target.files && e.target.files.length > 0) {\n      let file = e.target.files[0];\n      const reader = new FileReader();\n      reader.onload = () => {\n        var loaded = reader.result as string;\n        var split = loaded.split(\"~\");\n        var parsed: CalledNumber[] = split.map(x => {\n          var _parsed = JSON.parse(x);\n          return {\n            number: _parsed.number,\n            time: new Date(_parsed.time)\n          }\n        });\n        \n        var array = [...calledNumbers, ...parsed];\n        array.sort((a: CalledNumber, b: CalledNumber) => {\n          return a.time.getTime() - b.time.getTime();\n        });\n\n        array = array.filter((x, idx) => array.map(y => y.time.getTime()).indexOf(x.time.getTime()) === idx);\n        setCalledNumbers(array);\n      }\n      reader.readAsText(file);\n\n    }\n  }\n\n  const importInputRef = createRef<HTMLInputElement>();\n\n  return (\n    <Flex flexDir=\"column\" justifyContent=\"center\">\n      <Flex backgroundColor=\"gray.900\" alignItems=\"center\"\n        justifyContent=\"space-between\"\n      >\n        <Flex paddingX={2} paddingY={4} marginLeft={4}\n          alignItems=\"center\" fontSize=\"2xl\"\n        >\n          <GiCartwheel />\n          <Text ml={2} fontWeight=\"bold\"         \n            color=\"white\" fontSize=\"md\"\n          >\n            RLTE\n          </Text>\n        </Flex>\n\n        <ButtonGroup variant=\"outline\" size=\"sm\" mr={2} colorScheme=\"cyan\">\n          <Button leftIcon={<FaFileImport />}\n            onClick={() => onImport()}\n          >Import</Button>\n          <Input type=\"file\" accept=\"text/plain\"\n            onChange={e => loadFile(e)}\n            ref={importInputRef}\n            display=\"none\"\n          />\n          <Button leftIcon={<FaFileExport />}\n            onClick={() => onExport()}\n          >Export</Button>\n        </ButtonGroup>\n      </Flex>\n      <Flex maxWidth=\"800px\" flexDir=\"column\" flex={1} alignSelf=\"center\"\n        padding={4}\n      >\n        <Flex maxWidth=\"700px\" justifyContent=\"center\" mt={4}>\n          <Grid\n            templateRows=\"repeat(6, 1fr)\"\n            templateColumns=\"repeat(13, 1fr)\"\n            gap={1}\n            height=\"180px\"\n          >\n            {\n              rouletteNumbers.map(x => \n                x.map(y => \n                  <GridItem key={y.value === \"00\"\n                    ? 37\n                    : y.value === \"0\"\n                      ? 38\n                      : y.value\n                    } rowSpan={y.value === \"00\" || y.value === \"0\" ? 3 : 2} colSpan={1}\n                  >\n                    <RouletteNumberButton\n                      number={y}\n                      onClick={appendToCalled}\n                    />\n                  </GridItem>\n                )\n              )\n            }\n          </Grid>\n        </Flex>\n        <Accordion mt={4} allowMultiple>\n          <AccordionItem>\n            <AccordionButton>\n              <Flex alignItems=\"center\" flex={1}>\n                <FaCalculator />\n                <Text ml={4}>Double Down Calculator</Text>\n              </Flex>\n              <AccordionIcon />\n            </AccordionButton>\n            <AccordionPanel>\n              <Flex flexDir=\"column\">\n                <Flex display=\"flex\" alignItems=\"center\">\n                  <Text minW=\"35px\">I want</Text>\n                  <Input size=\"lg\" variant=\"flushed\" placeholder=\"#\" type=\"number\"\n                    maxW=\"75px\" textAlign=\"center\"\n                    mx={2}\n                    onChange={(e) => setNumberOfBets(parseInt(e.target.value))}\n                  />\n                  \n                  <Text minW=\"225px\">max bets, with a starting bet of</Text>\n                  <InputGroup maxW=\"150px\" mx={2} size=\"lg\" >\n                    <InputLeftElement\n                      maxW=\"20px\"\n                      pointerEvents='none'\n                      height=\"100%\"\n                      children='$'\n                    />\n                    <Input variant=\"flushed\" placeholder=\"123456\" type=\"number\"\n                      onChange={(e) => setStartingBet(parseInt(e.target.value))}\n                      textAlign=\"center\"\n                    />\n                  </InputGroup>\n                  <Text>.</Text>\n                </Flex>\n\n                <Flex mt={4} alignItems=\"center\">\n                  <Text fontWeight=\"bold\">You will need:</Text>\n                  <Text ml={8} fontSize=\"2xl\">${totalNeeded()}</Text>\n                </Flex>\n              </Flex>\n            </AccordionPanel>\n          </AccordionItem>\n        </Accordion>\n        <Flex mt={2} flexDir=\"column\">\n          <HStack flex={1} mt={2} alignItems=\"flex-start\">\n            <Flex flexDir=\"column\" flex={1}>\n              <Flex alignItems=\"center\" mb={2}>\n                <Heading size=\"md\">Recently Called:</Heading>\n                <Button ml={2}\n                  size=\"sm\"\n                  onClick={() => setShowNumber(!showNumber)}\n                  leftIcon={showNumber ? <FaEyeSlash /> : <FaEye />}\n                >\n                  Toggle Text\n                </Button>\n              </Flex>\n              {\n                calledNumbers.length === 0\n                ? <Flex flex={1}>None called.</Flex>\n                : <SimpleGrid columns={10} flex={1} gap={1} pr={2}\n                  mr={2} maxH=\"188px\" overflowY=\"auto\"\n                >\n                  {\n                    calledNumbers.slice().reverse().map(x => \n                      <Box key={x.time.getTime().toString()}\n                        textAlign=\"center\"\n                        color=\"white\"\n                        borderRadius=\"sm\"\n                        width=\"29px\"\n                        height=\"25px\"\n                        backgroundColor={\n                          x.number.color === NumberColor.Red\n                          ? \"red\"\n                          : x.number.color === NumberColor.Black\n                            ? \"black\"\n                            : \"green\"\n                        }\n                        fontWeight=\"semibold\"\n                      >\n                        {\n                          showNumber ? x.number.value : null\n                        }\n                      </Box>\n                    )\n                  }\n                </SimpleGrid>\n              }\n            </Flex>\n            <Flex flex={1} borderLeft=\"1px solid var(--chakra-colors-gray-200)\" margin={0} marginInlineStart=\"0 !important\"\n              paddingX={2} flexDir=\"column\"\n            >\n              <Heading size=\"md\" mb={2} ml={4}>Statistics:</Heading>\n              <Table size=\"sm\">\n                <Thead>\n                  <Tr>\n                    <Th>Name</Th>\n                    <Th isNumeric>Count</Th>\n                    <Th isNumeric>% of Total</Th>\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  <Tr>\n                    <Td>Total</Td>\n                    <Td isNumeric>{calledNumbers.length}</Td>\n                    <Td isNumeric>-</Td>\n                  </Tr>\n                  <Tr borderTopWidth={3}>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex backgroundColor=\"red\" width=\"15px\" height=\"15px\"\n                          mr={2} borderRadius=\"full\" ml=\"1px\"\n                        />\n                        Red\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByColor(NumberColor.Red)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Red))} %</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex backgroundColor=\"black\" width=\"15px\" height=\"15px\"\n                          mr={2} borderRadius=\"full\" ml=\"1px\"\n                        />\n                        Black\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByColor(NumberColor.Black)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Black))} %</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex backgroundColor=\"green\" width=\"15px\" height=\"15px\"\n                          mr={2} borderRadius=\"full\" ml=\"1px\"\n                        />\n                        Green\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByColor(NumberColor.Green)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Green))} %</Td>\n                  </Tr>\n\n                  <Tr borderTopWidth={3}>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"md\" mr={2}>\n                          <BsSquareHalf />\n                        </Flex>\n                        Even\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByModulo(2, 0)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByModulo(2, 0))} %</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"md\" mr={2}><BsTriangleHalf /></Flex>\n                        Odd\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByModulo(2, 1)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByModulo(2, 1))} %</Td>\n                  </Tr>\n\n                  <Tr borderTopWidth={3}>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"md\" mr={2}><BsCircleHalf /></Flex>\n                        1-18\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByRange(1, 18)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByRange(1, 18))} %</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"md\" mr={2} transform=\"rotate(180deg)\"><BsCircleHalf /></Flex>\n                        19-36\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByRange(19, 36)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByRange(19, 36))} %</Td>\n                  </Tr>\n\n                  <Tr borderTopWidth={3}>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderLeft /></Flex>\n                        1st 12\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByRange(1, 12)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByRange(1, 12))} %</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderHorizontal /></Flex>\n                        2nd 12\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByRange(13, 24)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByRange(13, 24))} %</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderRight /></Flex>\n                        3rd 12\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByRange(25, 36)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByRange(25, 36))} %</Td>\n                  </Tr>\n\n                  <Tr borderTopWidth={3}>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderTop /></Flex>\n                        Top 2 to 1\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByModulo(3, 0)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 0))} %</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderVerticle /></Flex>\n                        Mid 2 to 1\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByModulo(3, 2)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 2))} %</Td>\n                  </Tr>\n                  <Tr>\n                    <Td>\n                      <Flex alignItems=\"center\">\n                        <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderBottom /></Flex>\n                        Bot 2 to 1\n                      </Flex>\n                    </Td>\n                    <Td isNumeric>{getCountByModulo(3, 1)}</Td>\n                    <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 1))} %</Td>\n                  </Tr>\n\n                </Tbody>\n              </Table>\n            </Flex>\n          </HStack>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, useColorMode } from '@chakra-ui/react';\n\nconst ForceDarkMode = (props: { children: JSX.Element }) => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  useEffect(() => {\n    if (colorMode === \"dark\") return;\n    toggleColorMode();\n  }, [colorMode, toggleColorMode]);\n\n  return props.children;\n}\n\nReactDOM.render(\n  <ChakraProvider>\n    <ForceDarkMode>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    </ForceDarkMode>\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}