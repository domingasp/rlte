{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberColor","rouletteNumbers","value","color","Green","Red","Black","dateToString","date","toLocaleDateString","year","month","day","hour","minute","getButtonBackgroundColor","colorProp","getButtonHoverBackgroundColor","RouletteNumberButton","number","onClick","backgroundColor","_hover","width","height","borderRadius","Header","calledNumbers","setCalledNumbers","toast","useToast","importInputRef","createRef","alignItems","justifyContent","paddingX","paddingY","marginLeft","fontSize","ml","fontWeight","variant","size","mr","colorScheme","leftIcon","current","click","onImport","type","accept","onChange","e","target","files","length","file","reader","FileReader","onload","loaded","result","test","Error","parsed","split","map","x","parsedX","rouletteNumber","reduce","accumulator","concat","find","y","time","Date","parseInt","array","sort","a","b","getTime","filter","idx","indexOf","err","description","position","status","duration","isClosable","readAsText","loadFile","ref","display","stringedCalledNumbers","join","elem","document","createElement","Blob","href","URL","createObjectURL","download","toISOString","body","appendChild","onExport","RouletteTable","appendToCalled","useState","window","innerWidth","setWidth","useEffect","handleResize","addEventListener","removeEventListener","mt","overflowX","alignSelf","maxWidth","templateRows","templateColumns","gap","rowSpan","colSpan","background","py","pl","ToolsAccordion","filteredStartDate","filteredEndDate","setFilteredStartDate","setFilteredEndDate","numberOfBets","setNumberOfBets","startingBet","setStartingBet","undefined","startDate","setStartDate","endDate","setEndDate","isFiltered","setIsFiltered","onClickLastXTime","minutes","closest15Mins","getClosest15Mins","oneHourAgo","d","_","clone","getMinutes","hours","getHours","m","Math","floor","h","round","ceil","setMinutes","setHours","dateRangeBreakpoint","allowMultiple","flex","minW","placeholder","textAlign","marginTop","marginBottom","sum","i","totalNeeded","mx","flexDirection","flexDir","mb","maxW","dateFormat","selected","selectsStart","showTimeSelect","maxDate","timeFormat","timeIntervals","placeholderText","selectsEnd","minDate","isDisabled","alignContent","justify","RecentlyCalled","removeCalledNumber","useDisclosure","isOpen","onOpen","onClose","activeNumber","setActiveNumber","showNumber","setShowNumber","border","boxShadow","overflow","overflowY","p","columns","maxH","_after","content","slice","reverse","padding","paddingInlineStart","paddingInlineEnd","toString","as","DistributionGraph","CustomGraphTooltip","active","payload","label","val","percentage","ResponsiveContainer","BarChart","data","count","acc","name","amt","fill","stroke","mapCalledNumbersToGraphData","CartesianGrid","vertical","XAxis","dataKey","interval","angle","tick","dx","dy","YAxis","allowDecimals","Bar","Tooltip","cursor","StatsTable","getCountByColor","getCountByModulo","modulo","shouldEqual","getCountByRange","start","end","getPercentageOfTotal","margin","marginInlineStart","isNumeric","borderTopWidth","transform","NumberStat","px","MaxInARowStats","includeGreen","setIncludeGreen","maxColorsInRow","numbers","cloneDeep","max","currentMax","forEach","maxHalfTableInRow","half","minInRange","maxInRange","maxEvenOddRow","even","App","statsBreakpoint","filterCalledByDate","t","pb","cn","curr","borderRight","pr","called","idxToRemove","findIndex","splice","my","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ForceDarkMode","props","useColorMode","colorMode","toggleColorMode","children","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b4a44f1a.chunk.js","sourcesContent":["import { Button, Text, Flex, HStack, Box, SimpleGrid, Grid, GridItem, Table, Thead, Td, Tbody, Tr, Th, Heading, ButtonGroup, Accordion, AccordionItem, AccordionButton, AccordionIcon, AccordionPanel, Input, useToast, FormLabel, Tag, ModalOverlay, Modal, ModalContent, ModalHeader, useDisclosure, ModalCloseButton, ModalFooter, VStack, Divider, Checkbox, Wrap, WrapItem, ModalBody } from '@chakra-ui/react';\r\nimport { FaFileImport, FaFileExport, FaEyeSlash, FaEye, FaCalculator, FaInfoCircle, FaCalendar, FaTrash, FaRegHandPointUp } from \"react-icons/fa\";\r\nimport { GiCartwheel } from \"react-icons/gi\";\r\nimport { BsArrowRight, BsCircleHalf, BsSquareHalf, BsTriangleHalf } from \"react-icons/bs\"\r\nimport { AiOutlineBorderBottom, AiOutlineBorderHorizontal, AiOutlineBorderLeft, AiOutlineBorderRight, AiOutlineBorderTop, AiOutlineBorderVerticle } from \"react-icons/ai\";\r\nimport React, { createRef, useEffect, useState } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./react-datepicker.css\";\r\nimport _ from 'lodash';\r\nimport { Bar, BarChart, CartesianGrid, ResponsiveContainer, Tooltip, TooltipProps, XAxis, YAxis } from 'recharts';\r\n\r\nimport \"./recharts.css\"\r\nimport { NameType, ValueType } from 'recharts/types/component/DefaultTooltipContent';\r\n\r\nconst MS_PER_MINUTE = 60000;\r\n\r\n// ####################################\r\n// ## Type Declarations\r\n// ####################################\r\n\r\nenum NumberColor {\r\n  Red,\r\n  Black,\r\n  Green\r\n}\r\n\r\ntype RouletteNumber = {\r\n  value: string,\r\n  color: NumberColor\r\n}\r\n\r\ntype CalledNumber = {\r\n  time: Date,\r\n  number: RouletteNumber\r\n}\r\n\r\ntype BarChartDataType = {\r\n  name: string,\r\n  amt: number,\r\n  fill: string,\r\n  stroke: string\r\n}\r\n\r\nconst rouletteNumbers: RouletteNumber[][] = [\r\n  // Top row\r\n  [\r\n    { value: \"00\", color: NumberColor.Green },\r\n    { value: \"3\", color: NumberColor.Red},\r\n    { value: \"6\", color: NumberColor.Black},\r\n    { value: \"9\", color: NumberColor.Red},\r\n    { value: \"12\", color: NumberColor.Red},\r\n    { value: \"15\", color: NumberColor.Black},\r\n    { value: \"18\", color: NumberColor.Red},\r\n    { value: \"21\", color: NumberColor.Red},\r\n    { value: \"24\", color: NumberColor.Black},\r\n    { value: \"27\", color: NumberColor.Red},\r\n    { value: \"30\", color: NumberColor.Red},\r\n    { value: \"33\", color: NumberColor.Black},\r\n    { value: \"36\", color: NumberColor.Red}\r\n  ],\r\n\r\n  // Mid row\r\n  [\r\n    { value: \"2\", color: NumberColor.Black},\r\n    { value: \"5\", color: NumberColor.Red},\r\n    { value: \"8\", color: NumberColor.Black},\r\n    { value: \"11\", color: NumberColor.Black},\r\n    { value: \"14\", color: NumberColor.Red},\r\n    { value: \"17\", color: NumberColor.Black},\r\n    { value: \"20\", color: NumberColor.Black},\r\n    { value: \"23\", color: NumberColor.Red},\r\n    { value: \"26\", color: NumberColor.Black},\r\n    { value: \"29\", color: NumberColor.Black},\r\n    { value: \"32\", color: NumberColor.Red},\r\n    { value: \"35\", color: NumberColor.Black}\r\n  ],\r\n\r\n  // Bot row\r\n  [\r\n    { value: \"0\", color: NumberColor.Green },\r\n    { value: \"1\", color: NumberColor.Red},\r\n    { value: \"4\", color: NumberColor.Black},\r\n    { value: \"7\", color: NumberColor.Red},\r\n    { value: \"10\", color: NumberColor.Black},\r\n    { value: \"13\", color: NumberColor.Black},\r\n    { value: \"16\", color: NumberColor.Red},\r\n    { value: \"19\", color: NumberColor.Red},\r\n    { value: \"22\", color: NumberColor.Black},\r\n    { value: \"25\", color: NumberColor.Red},\r\n    { value: \"28\", color: NumberColor.Black},\r\n    { value: \"31\", color: NumberColor.Black},\r\n    { value: \"34\", color: NumberColor.Red}\r\n  ]\r\n];\r\n\r\n\r\n// ####################################\r\n// ## Component Declarations\r\n// ####################################\r\n\r\nconst dateToString = (date: Date) => {\r\n  var options: Intl.DateTimeFormatOptions = {\r\n    year: \"2-digit\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\"\r\n  }\r\n  return date.toLocaleDateString(\"en-GB\", options);\r\n}\r\n\r\nconst getButtonBackgroundColor = (colorProp: NumberColor) => {\r\n  return colorProp === NumberColor.Red\r\n    ? \"red\"\r\n    : colorProp === NumberColor.Black\r\n      ? \"black\"\r\n      : \"green\";\r\n}\r\n\r\nconst getButtonHoverBackgroundColor = (colorProp: NumberColor) => {\r\n  return colorProp === NumberColor.Red\r\n    ? \"red.500\"\r\n    : colorProp === NumberColor.Black\r\n      ? \"blackAlpha.600\"\r\n      : \"green.500\";\r\n}\r\n\r\ntype RouletteNumberButtonProps = {\r\n  number: RouletteNumber,\r\n  onClick: (value: RouletteNumber) => void\r\n}\r\nconst RouletteNumberButton = ({number, onClick}: RouletteNumberButtonProps) => {\r\n  return (\r\n    <Button\r\n      backgroundColor={getButtonBackgroundColor(number.color)}\r\n      _hover={{backgroundColor: getButtonHoverBackgroundColor(number.color)}}\r\n      color=\"white\"\r\n      width=\"50px\"\r\n      height=\"100%\"\r\n      borderRadius=\"sm\"\r\n      onClick={() => onClick(number)}\r\n    >\r\n      {number.value}\r\n    </Button>\r\n  )\r\n}\r\n\r\ntype HeaderProps = {\r\n  calledNumbers: CalledNumber[],\r\n  setCalledNumbers: (newCalledNumbers: CalledNumber[]) => void\r\n}\r\nconst Header = ({ calledNumbers, setCalledNumbers }: HeaderProps) => {\r\n  const toast = useToast();\r\n  \r\n  const onImport = () => {\r\n    importInputRef.current?.click();\r\n  }\r\n\r\n  const onExport = () => {\r\n    var stringedCalledNumbers = calledNumbers.map(x => `${x.number.value}:${x.time.getTime()}`).join(\",\");\r\n    \r\n    const elem = document.createElement(\"a\");\r\n    const file = new Blob(\r\n      [stringedCalledNumbers],\r\n      {type : \"text/plain\"}\r\n    );\r\n    elem.href = URL.createObjectURL(file);\r\n    elem.download = `rlte-${new Date().toISOString()}.txt`;\r\n    document.body.appendChild(elem);\r\n    elem.click();\r\n  }\r\n  const loadFile = (e: any) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      let file = e.target.files[0];\r\n      const reader = new FileReader();\r\n      \r\n      reader.onload = () => {\r\n        var loaded = reader.result as string;\r\n        \r\n        try {\r\n          let fileStructureRegex = /^(\\d\\d?:\\d{13},)*(\\d\\d?:\\d{13})$/;\r\n          if (!fileStructureRegex.test(loaded)) {\r\n            throw Error\r\n          }\r\n\r\n          var split = loaded.split(\",\");\r\n          var parsed: CalledNumber[] = split.map(x => {\r\n            var parsedX = x.split(\":\");\r\n            var rouletteNumber = rouletteNumbers.reduce((accumulator, value) => accumulator.concat(value), []).find(y => y.value === parsedX[0]);\r\n            if (!rouletteNumber) {\r\n              rouletteNumber = rouletteNumbers[0][0];\r\n            }\r\n            return {\r\n              number: rouletteNumber,\r\n              time: new Date(parseInt(parsedX[1]))\r\n            }\r\n          });\r\n          \r\n          var array = [...calledNumbers, ...parsed];\r\n          array.sort((a: CalledNumber, b: CalledNumber) => {\r\n            return a.time.getTime() - b.time.getTime();\r\n          });\r\n\r\n          array = array.filter((x, idx) => array.map(y => y.time.getTime()).indexOf(x.time.getTime()) === idx);\r\n          setCalledNumbers(array);\r\n        } catch (err) {\r\n          toast({\r\n            description: \"Invalid file.\",\r\n            position: \"top\",\r\n            status: \"error\",\r\n            duration: 3000,\r\n            isClosable: true\r\n          })\r\n        }\r\n      }\r\n      reader.readAsText(file);\r\n\r\n    }\r\n  }\r\n\r\n  const importInputRef = createRef<HTMLInputElement>();\r\n\r\n  return (\r\n    <Flex backgroundColor=\"gray.900\" alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n    >\r\n      <Flex paddingX={2} paddingY={4} marginLeft={4}\r\n        alignItems=\"center\" fontSize=\"2xl\"\r\n      >\r\n        <GiCartwheel />\r\n        <Text ml={2} fontWeight=\"bold\"         \r\n          color=\"white\" fontSize=\"md\"\r\n        >\r\n          RLTE\r\n        </Text>\r\n      </Flex>\r\n\r\n      <ButtonGroup variant=\"outline\" size=\"sm\" mr={2} colorScheme=\"cyan\">\r\n        <Button leftIcon={<FaFileImport />}\r\n          onClick={() => onImport()}\r\n        >Import</Button>\r\n        <Input type=\"file\" accept=\"text/plain\"\r\n          onChange={e => loadFile(e)}\r\n          ref={importInputRef}\r\n          display=\"none\"\r\n        />\r\n        <Button leftIcon={<FaFileExport />}\r\n          onClick={() => onExport()}\r\n        >Export</Button>\r\n      </ButtonGroup>\r\n    </Flex>\r\n\r\n  )\r\n}\r\n\r\ntype RouletteTableProps = {\r\n  appendToCalled: (num: RouletteNumber) => void\r\n}\r\nconst RouletteTable = ({ appendToCalled }: RouletteTableProps) => {\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWidth(window.innerWidth);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, [width]);\r\n\r\n  return (\r\n    <VStack mt={3} overflowX=\"auto\" alignSelf=\"center\"\r\n      maxWidth=\"700px\" width=\"100%\"\r\n    >\r\n      <Grid\r\n        templateRows={width <= 730 ? \"repeat(7, 1fr)\" : \"repeat(6, 1fr)\"}\r\n        templateColumns=\"repeat(13, 1fr)\"\r\n        gap={1}\r\n        height={width <= 730 ? \"224px\" : \"180px\"}\r\n        alignSelf=\"flex-start\"\r\n      >\r\n        {\r\n          rouletteNumbers.map(x => \r\n            x.map(y => \r\n              <GridItem key={y.value === \"00\"\r\n                ? 37\r\n                : y.value === \"0\"\r\n                  ? 38\r\n                  : y.value\r\n                } rowSpan={y.value === \"00\" || y.value === \"0\" ? 3 : 2} colSpan={1}\r\n              >\r\n                <RouletteNumberButton\r\n                  number={y}\r\n                  onClick={appendToCalled}\r\n                />\r\n              </GridItem>\r\n            )\r\n          )\r\n        }\r\n\r\n        {\r\n          width <= 730\r\n          ? <GridItem rowSpan={1} colSpan={13} background=\"gray.700\" color=\"gray.400\">\r\n              <HStack py={3} pl={3}>\r\n                <FaRegHandPointUp />\r\n                <Text>Scroll right to see rest of table...</Text>\r\n              </HStack>\r\n          </GridItem>\r\n          : null\r\n        }\r\n      </Grid>\r\n    </VStack>\r\n  )\r\n}\r\n\r\ntype ToolsAccordionProps = {\r\n  filteredStartDate: Date | undefined,\r\n  filteredEndDate: Date | undefined,\r\n  setFilteredStartDate: (newDate: Date | undefined) => void,\r\n  setFilteredEndDate: (newDate: Date | undefined) => void,\r\n}\r\nconst ToolsAccordion = ({ filteredStartDate, filteredEndDate, setFilteredStartDate, setFilteredEndDate }: ToolsAccordionProps) => {\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWidth(window.innerWidth);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, [width]);\r\n  \r\n  const [numberOfBets, setNumberOfBets] = useState<number>(0);\r\n  const [startingBet, setStartingBet] = useState<number>(0);\r\n  const totalNeeded = () => {\r\n    var sum = startingBet;\r\n    for (var i = 1; i <= numberOfBets; i++) {\r\n      sum *= 2;\r\n    }\r\n\r\n    return sum - startingBet;\r\n  }\r\n\r\n  const [startDate, setStartDate] = useState<Date | undefined>(undefined);\r\n  const [endDate, setEndDate] = useState<Date | undefined>(undefined);\r\n\r\n  const [isFiltered, setIsFiltered] = useState(false);\r\n\r\n  const onClickApply = () => {\r\n    setFilteredStartDate(startDate);\r\n    setFilteredEndDate(endDate);\r\n    setIsFiltered(true);\r\n  }\r\n\r\n  const onClickLastXTime = (minutes: number) => {\r\n    var closest15Mins = getClosest15Mins(new Date(), \"ceil\");\r\n    var oneHourAgo = new Date(closest15Mins.getTime() - (minutes * MS_PER_MINUTE));\r\n\r\n    setStartDate(oneHourAgo);\r\n    setEndDate(undefined);\r\n    setFilteredStartDate(oneHourAgo);\r\n    setFilteredEndDate(undefined);\r\n    setIsFiltered(true);\r\n  }\r\n\r\n  const onClickClear = () => {\r\n    setStartDate(undefined);\r\n    setEndDate(undefined);\r\n    setFilteredStartDate(undefined);\r\n    setFilteredEndDate(undefined);\r\n    setIsFiltered(false);\r\n  }\r\n\r\n  const getClosest15Mins = (date: Date, type: \"round\" | \"ceil\" | \"floor\") => {\r\n    var d = _.clone(date);\r\n    var minutes = date.getMinutes();\r\n    var hours = date.getHours();\r\n\r\n    var m = (Math.floor(minutes/15) * 15) % 60;\r\n    var h = minutes > 52 ? (hours === 23 ? 0 : hours + 1) : hours;\r\n    if (type === \"round\") {\r\n      m = (Math.round(minutes/15) * 15) % 60;\r\n    } else if (type === \"ceil\") {\r\n      m = (Math.ceil(minutes/15) * 15) % 60;\r\n      if (m === 0 && h !== hours + 1) {\r\n        h = hours + 1;\r\n      }\r\n    }\r\n    else {\r\n      h = hours;\r\n    }\r\n\r\n    d.setMinutes(m, 0, 0);\r\n    d.setHours(h);\r\n    return d;\r\n  }\r\n\r\n  const dateRangeBreakpoint = 620;\r\n\r\n  return (\r\n    <Accordion mt={4} allowMultiple>\r\n      <AccordionItem>\r\n        <AccordionButton>\r\n          <Flex alignItems=\"center\" flex={1}>\r\n            <FaCalculator />\r\n            <Text ml={4}>Double Down Calculator</Text>\r\n          </Flex>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <VStack width=\"100%\">\r\n            <Wrap width=\"100%\">\r\n              <WrapItem alignItems=\"center\">\r\n                <Text minW=\"200px\">How many bets?</Text>\r\n              </WrapItem>\r\n              <WrapItem flex={1}>\r\n                <Input minW=\"200px\" size=\"lg\" variant=\"flushed\" placeholder=\"#\" type=\"number\"\r\n                  textAlign=\"center\" flex={1}\r\n                  onChange={(e) => setNumberOfBets(parseInt(e.target.value))}\r\n                />\r\n              </WrapItem>\r\n            </Wrap>\r\n            \r\n            <Wrap width=\"100%\" mt={width <= 471 ? \"var(--chakra-space-4) !important\" : \"\"}>\r\n              <WrapItem alignItems=\"center\">\r\n                <Text minW=\"200px\">What's the starting bet?</Text>\r\n              </WrapItem>\r\n              <WrapItem flex={1}>\r\n                <Input minW=\"200px\" size=\"lg\" variant=\"flushed\" placeholder=\"123456\" type=\"number\"\r\n                  onChange={(e) => setStartingBet(parseInt(e.target.value))}\r\n                  textAlign=\"center\" flex={1}\r\n                />\r\n              </WrapItem>\r\n            </Wrap>\r\n\r\n            <Divider marginTop=\"28px !important\" marginBottom=\"10px !important\" />\r\n\r\n            <HStack width=\"100%\" alignItems=\"center\">\r\n              <Text fontWeight=\"normal\">You will need:</Text>\r\n              <Text ml={8} fontSize=\"2xl\" flex={1}\r\n                textAlign=\"center\" fontWeight=\"medium\"\r\n              >\r\n                ${totalNeeded()}\r\n              </Text>\r\n            </HStack>\r\n          </VStack>\r\n        </AccordionPanel>\r\n      </AccordionItem>\r\n      <AccordionItem>\r\n        <AccordionButton flex={1}>\r\n          <Wrap flex={1}>\r\n          <WrapItem>\r\n          <Flex alignItems=\"center\" flex={1} minW=\"150px\">\r\n            <FaCalendar />\r\n            <Text ml={4}>Filter by Date</Text>\r\n          </Flex>\r\n          </WrapItem>\r\n          {\r\n            isFiltered\r\n            ? <WrapItem justifyContent=\"flex-end\" width=\"100%\" flex={width <= dateRangeBreakpoint - 100 ? undefined : 1}>\r\n                <Flex alignItems=\"center\" mr={2}>\r\n                {\r\n                  (filteredStartDate && <Tag colorScheme=\"cyan\">{dateToString(filteredStartDate)}</Tag>)\r\n                  || <Tag colorScheme=\"cyan\">No start date</Tag>\r\n                }\r\n                <Box mx={2}><BsArrowRight /></Box>\r\n                {\r\n                  (filteredEndDate && <Tag colorScheme=\"cyan\">{dateToString(filteredEndDate)}</Tag>)\r\n                  || <Tag colorScheme=\"cyan\">No end date</Tag>\r\n                }\r\n              </Flex>\r\n            </WrapItem>\r\n            : null\r\n          }\r\n          </Wrap>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Flex flexDirection=\"column\">\r\n            <Flex alignItems=\"center\" flexDir={width <= dateRangeBreakpoint ? \"column\" : \"row\"}>\r\n              <FormLabel mb={0} mr={2} flex={1}\r\n                minW=\"100px\" width={width <= dateRangeBreakpoint ? \"100%\" : undefined}\r\n              >\r\n                Date Range:\r\n              </FormLabel>\r\n\r\n              <Box\r\n                mt={width <= dateRangeBreakpoint ? 4 : 0}\r\n                width=\"100%\"\r\n                maxW={width <= dateRangeBreakpoint ? undefined : \"160px\"}\r\n              >\r\n                <ReactDatePicker\r\n                  dateFormat=\"dd/MM/yy HH:mm\"\r\n                  selected={startDate}\r\n                  onChange={(date) => setStartDate(date as Date)}\r\n                  selectsStart\r\n\r\n                  showTimeSelect\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  maxDate={endDate}\r\n                  \r\n                  timeFormat=\"HH:mm\"\r\n                  timeIntervals={15}\r\n\r\n                  placeholderText=\"Start Date...\"\r\n                />\r\n              </Box>\r\n\r\n              {\r\n                width > dateRangeBreakpoint\r\n                ? <Box flex={0} mx={4}><BsArrowRight /></Box>\r\n                : null\r\n              }\r\n              \r\n              <Box\r\n                mt={width <= dateRangeBreakpoint ? 4 : 0}\r\n                width=\"100%\"\r\n                maxW={width <= dateRangeBreakpoint ? undefined : \"160px\"}\r\n              >\r\n                <ReactDatePicker\r\n                  dateFormat=\"dd/MM/yy HH:mm\"\r\n                  selected={endDate}\r\n                  onChange={(date) => setEndDate(date as Date)}\r\n                  selectsEnd\r\n\r\n                  showTimeSelect\r\n                  startDate={startDate}\r\n                  endDate={endDate}\r\n                  minDate={startDate}\r\n\r\n                  timeFormat=\"HH:mm\"\r\n                  timeIntervals={15}\r\n\r\n                  placeholderText=\"End Date...\"\r\n                />\r\n              </Box>\r\n\r\n              <Button size=\"sm\" colorScheme=\"cyan\" variant=\"outline\"\r\n                ml={width <= dateRangeBreakpoint ? 0 : 4}\r\n                onClick={onClickApply} isDisabled={!startDate && !endDate}\r\n                width={width <= dateRangeBreakpoint ? \"100%\" : undefined}\r\n                mt={width <= dateRangeBreakpoint ? 4 : 0}\r\n              >\r\n                Apply\r\n              </Button>\r\n            </Flex>\r\n            <Wrap mt={4} alignContent=\"center\">\r\n              <FormLabel mb={0} mr={2} flex={1} alignSelf=\"center\" minW=\"100px\">Quick Filter:</FormLabel>\r\n\r\n              <WrapItem justifyContent=\"flex-end\">\r\n                <ButtonGroup colorScheme=\"cyan\" size=\"sm\" variant=\"outline\">\r\n                  <Wrap justify=\"center\">\r\n                    <Button onClick={() => onClickLastXTime(60)}>Last hour</Button>\r\n                    <Button onClick={() => onClickLastXTime(30)}>Last 30 mins</Button>\r\n                    <Button onClick={() => onClickLastXTime(15)}>Last 15 mins</Button>\r\n                    <Button colorScheme=\"red\" onClick={onClickClear}>Clear</Button>\r\n                  </Wrap>\r\n                </ButtonGroup>\r\n              </WrapItem>\r\n            </Wrap>\r\n          </Flex>\r\n        </AccordionPanel>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  )\r\n}\r\n\r\ntype RecentlyCalledProps = {\r\n  calledNumbers: CalledNumber[]\r\n  removeCalledNumber: (number: CalledNumber) => void\r\n}\r\nconst RecentlyCalled = ({ calledNumbers, removeCalledNumber }: RecentlyCalledProps) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [activeNumber, setActiveNumber] = useState<CalledNumber>({time: new Date(), number: { value: \"1\", color: NumberColor.Red }});\r\n  const [showNumber, setShowNumber] = useState(true);\r\n\r\n  const onClickHandle = (number: CalledNumber) => {\r\n    setActiveNumber(number);\r\n    onOpen();\r\n  }\r\n\r\n  const onDeleteConfirm = (number: CalledNumber) => {\r\n    removeCalledNumber(number);\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Flex flexDir=\"column\" mr={2}>\r\n      <Flex alignItems=\"center\" mb={2} justifyContent=\"space-between\">\r\n        <Flex alignItems=\"center\" width=\"100%\">\r\n          <Heading size=\"md\" flex={1}>Recently Called:</Heading>\r\n          <Button ml={2}\r\n            size=\"sm\"\r\n            onClick={() => setShowNumber(!showNumber)}\r\n            leftIcon={showNumber ? <FaEyeSlash /> : <FaEye />}\r\n          >\r\n            Toggle Text\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n      <Flex border=\"1px solid white\" boxShadow=\"0 0 0 1px white inset\" justifyContent=\"center\"\r\n        borderRadius=\"md\"\r\n        h=\"188px\" overflow=\"hidden\"\r\n      >\r\n        {\r\n          calledNumbers.length === 0\r\n          ? <Flex alignItems=\"center\">\r\n                <FaInfoCircle />\r\n                <Text ml={2}>No numbers called.</Text>\r\n          </Flex>\r\n          : <Flex overflowY=\"auto\"  flex={1} height=\"inherit\"\r\n            p={2} border=\"1px solid white\" borderRadius=\"md\"\r\n          ><SimpleGrid columns={10} gap={1} flex={1} height=\"0%\" maxH=\"20px\"\r\n          borderRadius=\"md\"\r\n            _after={{\r\n              content: '\" \"',\r\n              display: \"block\",\r\n              width: \"100%\",\r\n              height: \"25px\",\r\n              marginTop: \"10px\"\r\n            }}\r\n          >\r\n            {\r\n              calledNumbers.slice().reverse().map(x => \r\n                <Button key={x.time.getTime().toString()}\r\n                  size=\"sm\" height=\"25px\" width=\"100%\"\r\n                  backgroundColor={getButtonBackgroundColor(x.number.color)}\r\n                  _hover={{backgroundColor: getButtonHoverBackgroundColor(x.number.color)}}\r\n                  padding={0}\r\n                  paddingInlineStart={0}\r\n                  paddingInlineEnd={0}\r\n                  minW={0}\r\n                  onClick={() => onClickHandle(x)}\r\n                >\r\n                  {\r\n                    showNumber ? x.number.value : null\r\n                  }\r\n                </Button>\r\n              )\r\n            }\r\n          </SimpleGrid></Flex>\r\n        }\r\n      </Flex>\r\n    </Flex>\r\n\r\n    <Modal isOpen={isOpen} onClose={onClose}>\r\n      <ModalOverlay />\r\n      <ModalContent mx={2}>\r\n        <ModalHeader>\r\n          <Flex>\r\n            <Text>Delete Number?</Text>\r\n          </Flex>\r\n        </ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody>\r\n          <Text as=\"span\">Delete</Text>\r\n          <Box backgroundColor={getButtonBackgroundColor(activeNumber.number.color)}\r\n            width=\"35px\" textAlign=\"center\"\r\n            mx={2} borderRadius=\"md\"\r\n            display=\"inline-block\"\r\n          >\r\n            {activeNumber.number.value}\r\n          </Box>\r\n          <Text as=\"span\">called at {<Text as=\"span\" fontWeight=\"semibold\">{dateToString(activeNumber.time)}</Text>}?</Text>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <ButtonGroup size=\"sm\" justifyContent=\"space-between\">\r\n            <Button variant=\"ghost\" onClick={onClose}>Cancel</Button>\r\n            <Button variant=\"outline\" colorScheme=\"red\"\r\n              leftIcon={<FaTrash />}\r\n              onClick={() => onDeleteConfirm(activeNumber)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </ButtonGroup>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\ntype DistributionGraphProps = {\r\n  calledNumbers: CalledNumber[]\r\n}\r\nconst DistributionGraph = ({ calledNumbers }: DistributionGraphProps) => {\r\n  const mapCalledNumbersToGraphData = () => {\r\n    var flattenedRouletteNumbers = rouletteNumbers.reduce((accumulator, value) => accumulator.concat(value), [])\r\n    \r\n    var data: BarChartDataType[] = flattenedRouletteNumbers.map(x => {\r\n      var count = calledNumbers.reduce((acc, {number}) => x.value === number.value ? ++acc : acc, 0);\r\n\r\n      return {\r\n        name: x.value,\r\n        amt: count,\r\n        fill: getButtonBackgroundColor(x.color),\r\n        stroke: x.color === NumberColor.Black ? \"var(--chakra-colors-gray-500)\" : \"\"\r\n      };\r\n    });\r\n\r\n    data.sort((a : BarChartDataType, b: BarChartDataType) => {\r\n      return parseInt(a.name) < (parseInt(b.name)) ? -1 : 1;\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  const CustomGraphTooltip = ({ active, payload, label }: TooltipProps<ValueType, NameType>) => {\r\n    if (active) {\r\n      var rouletteNumber = rouletteNumbers.reduce((accumulator, value) => accumulator.concat(value), []).find(x => x.value === label)!\r\n      var val = payload![0].value!;\r\n      var percentage = Math.round((val as number / calledNumbers.length) * 10000) / 100;\r\n      return (\r\n        <Flex\r\n          color=\"gray.900\"\r\n          backgroundColor=\"gray.300\"\r\n          paddingX={2}\r\n          paddingY={1}\r\n          fontSize=\"sm\"\r\n          fontWeight=\"medium\"\r\n          borderRadius=\"sm\"\r\n          boxShadow=\"md\"\r\n          maxW=\"320px\"\r\n        >\r\n          <Text backgroundColor={getButtonBackgroundColor(rouletteNumber.color)}\r\n            color=\"white\" borderRadius=\"md\" width=\"26px\" textAlign=\"center\"\r\n            mr={2}\r\n          >\r\n            {label}\r\n          </Text>\r\n          <Text mr={2}>Called:</Text>\r\n          <Text>{val} ({percentage}%)</Text>\r\n        </Flex>\r\n      );\r\n    }\r\n  \r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <Flex mt={4} flexDirection=\"column\">\r\n      <Heading size=\"md\" mb={4}>Distribution:</Heading>\r\n      <ResponsiveContainer width=\"96%\" height={250}>\r\n        <BarChart\r\n          width={500}\r\n          height={400}\r\n          data={mapCalledNumbersToGraphData()}\r\n        >\r\n          <CartesianGrid vertical={false} stroke=\"var(--chakra-colors-gray-700)\" />\r\n          <XAxis dataKey=\"name\" stroke=\"var(--chakra-colors-gray-200)\" type={\"category\"} interval={1}\r\n            angle={-90} tick={{ fontSize: 14, dx: -5, dy: 10 }}\r\n          />\r\n          <YAxis allowDecimals={false} width={20} stroke=\"var(--chakra-colors-gray-200)\" />\r\n          <Bar dataKey=\"amt\" />\r\n          <Tooltip content={<CustomGraphTooltip />} cursor={{\"fill\": \"var(--chakra-colors-cyan-500)\", \"opacity\": \"0.25\"}} />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ntype StatsTableProps = {\r\n  calledNumbers: CalledNumber[]\r\n}\r\nconst StatsTable = ({ calledNumbers }: StatsTableProps) => {\r\n  const getCountByColor = (calledNumbers: CalledNumber[], color: NumberColor) => {\r\n    return calledNumbers.filter(x => x.number.color === color).length;\r\n  }\r\n  \r\n  const getCountByModulo = (calledNumbers: CalledNumber[], modulo: number, shouldEqual: number) => {\r\n    return calledNumbers.filter(x => parseInt(x.number.value) > 0 && parseInt(x.number.value) % modulo === shouldEqual).length;\r\n  }\r\n  \r\n  const getCountByRange = (calledNumbers: CalledNumber[], start: number, end: number) => {\r\n    return calledNumbers.filter(x => parseInt(x.number.value) >= start && parseInt(x.number.value) <= end).length;\r\n  }\r\n  \r\n  const getPercentageOfTotal = (count: number) => {\r\n    return Math.round((count / calledNumbers.length) * 10000) / 100;\r\n  }\r\n\r\n  return (\r\n    <Flex flex={1} margin={0} marginInlineStart=\"0 !important\"\r\n      flexDir=\"column\" width=\"100%\"\r\n    >\r\n      <Heading size=\"md\" mb={2}>Statistics:</Heading>\r\n      <Table size=\"sm\">\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Name</Th>\r\n            <Th isNumeric>Count</Th>\r\n            <Th isNumeric>% of Total</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          <Tr>\r\n            <Td>Total</Td>\r\n            <Td isNumeric>{calledNumbers.length}</Td>\r\n            <Td isNumeric>-</Td>\r\n          </Tr>\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex backgroundColor=\"red\" width=\"15px\" height=\"15px\"\r\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\r\n                />\r\n                Red\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByColor(calledNumbers, NumberColor.Red)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(calledNumbers, NumberColor.Red))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex backgroundColor=\"black\" width=\"15px\" height=\"15px\"\r\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\r\n                />\r\n                Black\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByColor(calledNumbers, NumberColor.Black)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(calledNumbers, NumberColor.Black))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex backgroundColor=\"green\" width=\"15px\" height=\"15px\"\r\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\r\n                />\r\n                Green\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByColor(calledNumbers, NumberColor.Green)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(calledNumbers, NumberColor.Green))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2}>\r\n                  <BsSquareHalf />\r\n                </Flex>\r\n                Even\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 2, 0)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 2, 0))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2}><BsTriangleHalf /></Flex>\r\n                Odd\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 2, 1)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 2, 1))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2}><BsCircleHalf /></Flex>\r\n                1-18\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 1, 18)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 1, 18))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2} transform=\"rotate(180deg)\"><BsCircleHalf /></Flex>\r\n                19-36\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 19, 36)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 19, 36))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderLeft /></Flex>\r\n                1st 12\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 1, 12)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 1, 12))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderHorizontal /></Flex>\r\n                2nd 12\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 13, 24)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 13, 24))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderRight /></Flex>\r\n                3rd 12\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 25, 36)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 25, 36))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderTop /></Flex>\r\n                Top 2 to 1\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 3, 0)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 3, 0))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderVerticle /></Flex>\r\n                Mid 2 to 1\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 3, 2)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 3, 2))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderBottom /></Flex>\r\n                Bot 2 to 1\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 3, 1)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 3, 1))} %</Td>\r\n          </Tr>\r\n\r\n        </Tbody>\r\n      </Table>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ntype NumberStatProps = {\r\n  label: string,\r\n  value: number,\r\n  leftIcon?: React.ReactNode\r\n}\r\nconst NumberStat = ({ label, value, leftIcon }: NumberStatProps) => {\r\n  return (\r\n    <VStack border=\"1px solid white\" px={4} py={3} borderRadius=\"md\" flex={1}>\r\n      <HStack maxW=\"128px\" flex={1}>\r\n        <HStack px={3}>\r\n          { leftIcon }\r\n          <Heading size=\"md\" alignSelf=\"flex-start\" fontWeight=\"md\">\r\n            {label}\r\n          </Heading>\r\n        </HStack>\r\n      </HStack>\r\n      <Text fontSize=\"4xl\" flex={1} fontWeight=\"semibold\" textAlign=\"center\">{value}</Text>\r\n    </VStack>\r\n  )\r\n}\r\n\r\ntype MaxInARowStatsProps = {\r\n  calledNumbers: CalledNumber[]\r\n}\r\nconst MaxInARowStats = ({ calledNumbers }: MaxInARowStatsProps) => {\r\n  const [includeGreen, setIncludeGreen] = useState(false);\r\n\r\n  const maxColorsInRow = (color: NumberColor, includeGreen: boolean) => {\r\n    var numbers = _.cloneDeep(calledNumbers);\r\n    \r\n    // Sort\r\n    numbers.sort((a: CalledNumber, b: CalledNumber) => {\r\n      return a.time.getTime() - b.time.getTime();\r\n    });\r\n    \r\n    var max = 0;\r\n    var currentMax = 0;\r\n    numbers.forEach(x => {\r\n      if (x.number.color === color || (includeGreen && x.number.color === NumberColor.Green)) {\r\n        currentMax += 1;\r\n      } else {\r\n        if (currentMax > max) {\r\n          max = currentMax;\r\n        }\r\n\r\n        currentMax = 0;\r\n      }\r\n    });\r\n\r\n    if (max === 0) max = currentMax;\r\n    return max;\r\n  }\r\n\r\n  const maxHalfTableInRow = (half: \"1-18\" | \"19-36\", includeGreen: boolean) => {\r\n    var numbers = _.cloneDeep(calledNumbers);\r\n    \r\n    // Sort\r\n    numbers.sort((a: CalledNumber, b: CalledNumber) => {\r\n      return a.time.getTime() - b.time.getTime();\r\n    });\r\n\r\n    const minInRange = half === \"1-18\" ? 1 : 19;\r\n    const maxInRange = half === \"1-18\" ? 18 : 36;\r\n\r\n    var max = 0;\r\n    var currentMax = 0;\r\n    numbers.forEach(x => {\r\n      if ((parseInt(x.number.value) >= minInRange && parseInt(x.number.value) <= maxInRange)\r\n        || (includeGreen && x.number.color === NumberColor.Green)) {\r\n        currentMax += 1;\r\n      } else {\r\n        if (currentMax > max) {\r\n          max = currentMax;\r\n        }\r\n\r\n        currentMax = 0;\r\n      }\r\n    });\r\n\r\n    if (max === 0) max = currentMax;\r\n    return max;\r\n  }\r\n\r\n  const maxEvenOddRow = (even: boolean, includeGreen: boolean) => {\r\n    var numbers = _.cloneDeep(calledNumbers);\r\n    \r\n    // Sort\r\n    numbers.sort((a: CalledNumber, b: CalledNumber) => {\r\n      return a.time.getTime() - b.time.getTime();\r\n    });\r\n\r\n    const modulo = 2;\r\n    const shouldEqual = even ? 0 : 1\r\n\r\n    var max = 0;\r\n    var currentMax = 0;\r\n    numbers.forEach(x => {\r\n      if ((parseInt(x.number.value) > 0 && parseInt(x.number.value) % modulo === shouldEqual)\r\n        || (includeGreen && x.number.color === NumberColor.Green)) {\r\n        currentMax += 1;\r\n      } else {\r\n        if (currentMax > max) {\r\n          max = currentMax;\r\n        }\r\n\r\n        currentMax = 0;\r\n      }\r\n    });\r\n\r\n    if (max === 0) max = currentMax;\r\n    return max;\r\n  }\r\n\r\n\r\n  return (\r\n    <VStack>\r\n      <HStack mb={4} alignSelf=\"stretch\">\r\n        <Wrap width=\"100%\">\r\n          <Heading size=\"md\" alignSelf=\"flex-start\"\r\n            flex={1} minW=\"250px\"\r\n          >\r\n            Max Numbers in a Row:\r\n          </Heading>\r\n          <Checkbox\r\n            size=\"lg\"\r\n            value={\"includeGreen\"}\r\n            onChange={(e) => setIncludeGreen(!includeGreen)}\r\n            justifyContent=\"flex-end\"\r\n            flex={1}\r\n          >\r\n            <HStack fontSize=\"md\">\r\n              <Text>Include</Text>\r\n              <Flex display=\"inline-flex\" backgroundColor=\"green\" width=\"15px\" height=\"15px\" borderRadius=\"full\" ml=\"1px\" />\r\n              <Text>Green</Text>\r\n            </HStack>\r\n          </Checkbox>\r\n        </Wrap>\r\n      </HStack>\r\n        <SimpleGrid columns={6} gap={3} flex={1} alignSelf=\"stretch\">\r\n          <GridItem colSpan={3}>\r\n            <NumberStat label=\"Even\" value={maxEvenOddRow(true, includeGreen)}\r\n              leftIcon={<BsSquareHalf size=\"20px\" />}\r\n            />\r\n          </GridItem>\r\n          <GridItem colSpan={3}>\r\n            <NumberStat label=\"Odd\" value={maxEvenOddRow(false, includeGreen)}\r\n              leftIcon={<BsTriangleHalf size=\"20px\" />}\r\n            />\r\n          </GridItem>\r\n\r\n          <GridItem colSpan={2}>\r\n            <NumberStat label=\"Red\" value={maxColorsInRow(NumberColor.Red, includeGreen)}\r\n              leftIcon={<Flex backgroundColor=\"red\" width=\"15px\" height=\"15px\"\r\n                borderRadius=\"full\" ml=\"1px\"\r\n              />}\r\n            />\r\n          </GridItem>\r\n          <GridItem colSpan={2}>\r\n            <NumberStat label=\"Black\" value={maxColorsInRow(NumberColor.Black, includeGreen)}\r\n              leftIcon={<Flex backgroundColor=\"black\" width=\"15px\" height=\"15px\"\r\n                borderRadius=\"full\" ml=\"1px\"\r\n              />}\r\n            />\r\n          </GridItem>\r\n          <GridItem colSpan={2}>\r\n            <NumberStat label=\"Green\" value={maxColorsInRow(NumberColor.Green, includeGreen)}\r\n              leftIcon={<Flex backgroundColor=\"green\" width=\"15px\" height=\"15px\"\r\n                borderRadius=\"full\" ml=\"1px\"\r\n              />}\r\n            />\r\n          </GridItem>\r\n\r\n          <GridItem colSpan={3}>\r\n            <NumberStat label=\"1-18\" value={maxHalfTableInRow(\"1-18\", includeGreen)}\r\n              leftIcon={<BsCircleHalf size=\"20px\" />}\r\n            />\r\n          </GridItem>\r\n          <GridItem colSpan={3}>\r\n            <NumberStat label=\"19-36\" value={maxHalfTableInRow(\"19-36\", includeGreen)}\r\n              leftIcon={<Flex transform=\"rotate(180deg)\"><BsCircleHalf size=\"20px\" /></Flex>}\r\n            />\r\n          </GridItem>\r\n      </SimpleGrid>\r\n    </VStack>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWidth(window.innerWidth);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, [width]);\r\n  const statsBreakpoint = 630;\r\n\r\n  const [calledNumbers, setCalledNumbers] = useState<CalledNumber[]>([]);\r\n\r\n  const [filteredStartDate, setFilteredStartDate] = useState<Date | undefined>(undefined);\r\n  const [filteredEndDate, setFilteredEndDate] = useState<Date | undefined>(undefined);\r\n  \r\n  const appendToCalled = (number: RouletteNumber) => {\r\n    var cn: CalledNumber = {\r\n      time: new Date(),\r\n      number: number\r\n    }\r\n    setCalledNumbers(curr => [...curr, cn]);\r\n  }\r\n\r\n  const removeCalledNumber = (number: CalledNumber) => {\r\n    var called = _.cloneDeep(calledNumbers);\r\n    var idxToRemove = called.findIndex(x => x.time.getTime() === number.time.getTime());\r\n    if (idxToRemove !== -1) {\r\n      called.splice(idxToRemove, 1);\r\n\r\n      setCalledNumbers(called);\r\n    }\r\n  }\r\n\r\n  const filterCalledByDate = (): CalledNumber[] => {\r\n    return _.cloneDeep(calledNumbers).filter(x => {\r\n      var t = x.time.getTime();\r\n      if (filteredStartDate && filteredStartDate.getTime() > t) {\r\n        return false;\r\n      }\r\n\r\n      if (filteredEndDate && filteredEndDate.getTime() < t) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Flex flexDir=\"column\" justifyContent=\"center\">\r\n      <Header\r\n        calledNumbers={calledNumbers}\r\n        setCalledNumbers={setCalledNumbers}\r\n      />\r\n      <Flex maxWidth=\"800px\" width=\"100%\" flexDir=\"column\" alignSelf=\"center\"\r\n        alignContent=\"center\" padding={4}\r\n        pb={{\"base\": 8, \"md\": 4}}\r\n        overflowX=\"hidden\"\r\n      >\r\n        <RouletteTable appendToCalled={appendToCalled} />\r\n        \r\n        <ToolsAccordion\r\n          filteredStartDate={filteredStartDate}\r\n          filteredEndDate={filteredEndDate}\r\n          setFilteredStartDate={setFilteredStartDate}\r\n          setFilteredEndDate={setFilteredEndDate}        \r\n        />\r\n        \r\n        <Flex mt={2} flexDir=\"column\" mb={6}>\r\n          \r\n          <Flex flex={1} flexDir={width <= statsBreakpoint ? \"column\" : \"row\"} mt={2}\r\n            alignItems=\"flex-start\"\r\n          >\r\n            \r\n            <Flex flexDir=\"column\" flex={1} width=\"100%\"\r\n              borderRight={width > statsBreakpoint ? \"1px solid var(--chakra-colors-gray-700)\" : undefined}\r\n              mr={width > statsBreakpoint ? 4 : 0}\r\n              pr={width > statsBreakpoint ? 2 : 0}\r\n            >\r\n              <RecentlyCalled\r\n                calledNumbers={filterCalledByDate()}\r\n                removeCalledNumber={removeCalledNumber}\r\n              />\r\n\r\n              <DistributionGraph\r\n                calledNumbers={filterCalledByDate()}\r\n              />\r\n            </Flex>\r\n            \r\n            {\r\n              width <= statsBreakpoint && <Divider my={3} />\r\n            }\r\n            <StatsTable calledNumbers={filterCalledByDate()} />\r\n          </Flex>\r\n        </Flex>\r\n        {width > statsBreakpoint && <Divider mb={4} />}\r\n        <MaxInARowStats calledNumbers={filterCalledByDate()} />\r\n\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ChakraProvider, useColorMode } from '@chakra-ui/react';\r\n\r\nconst ForceDarkMode = (props: { children: JSX.Element }) => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  useEffect(() => {\r\n    if (colorMode === \"dark\") return;\r\n    toggleColorMode();\r\n  }, [colorMode, toggleColorMode]);\r\n\r\n  return props.children;\r\n}\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <ForceDarkMode>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n    </ForceDarkMode>\r\n  </ChakraProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}