{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberColor","rouletteNumbers","value","color","Green","Red","Black","dateToString","date","toLocaleDateString","year","month","day","hour","minute","getButtonBackgroundColor","colorProp","getButtonHoverBackgroundColor","RouletteNumberButton","number","onClick","backgroundColor","_hover","width","height","borderRadius","Header","calledNumbers","setCalledNumbers","toast","useToast","importInputRef","createRef","alignItems","justifyContent","paddingX","paddingY","marginLeft","fontSize","ml","fontWeight","variant","size","mr","colorScheme","leftIcon","current","click","onImport","type","accept","onChange","e","target","files","length","file","reader","FileReader","onload","split","result","parsed","map","x","parsedX","JSON","parse","time","Date","array","sort","a","b","getTime","filter","idx","y","indexOf","err","description","position","status","duration","isClosable","readAsText","loadFile","ref","display","stringedCalledNumbers","stringify","join","elem","document","createElement","Blob","href","URL","createObjectURL","download","toISOString","body","appendChild","onExport","RouletteTable","appendToCalled","maxWidth","mt","templateRows","templateColumns","gap","rowSpan","colSpan","ToolsAccordion","filteredStartDate","filteredEndDate","setFilteredStartDate","setFilteredEndDate","useState","numberOfBets","setNumberOfBets","startingBet","setStartingBet","undefined","startDate","setStartDate","endDate","setEndDate","isFiltered","setIsFiltered","onClickLastXTime","minutes","closest15Mins","getClosest15Mins","oneHourAgo","d","_","clone","getMinutes","hours","getHours","m","Math","floor","h","round","ceil","setMinutes","setHours","allowMultiple","flex","flexDir","minW","placeholder","maxW","textAlign","mx","parseInt","pointerEvents","children","sum","i","totalNeeded","flexDirection","mb","dateFormat","selected","selectsStart","showTimeSelect","maxDate","timeFormat","timeIntervals","placeholderText","selectsEnd","minDate","isDisabled","alignContent","alignSelf","RecentlyCalled","removeCalledNumber","useDisclosure","isOpen","onOpen","onClose","activeNumber","setActiveNumber","showNumber","setShowNumber","border","boxShadow","overflow","overflowY","p","columns","maxH","_after","content","marginTop","slice","reverse","padding","paddingInlineStart","paddingInlineEnd","toString","DistributionGraph","CustomGraphTooltip","active","payload","label","rouletteNumber","reduce","accumulator","concat","find","val","percentage","ResponsiveContainer","BarChart","data","count","acc","name","amt","fill","stroke","mapCalledNumbersToGraphData","CartesianGrid","vertical","XAxis","dataKey","interval","angle","tick","dx","dy","YAxis","allowDecimals","Bar","Tooltip","StatsTable","getCountByColor","getCountByModulo","modulo","shouldEqual","getCountByRange","start","end","getPercentageOfTotal","borderLeft","margin","marginInlineStart","isNumeric","borderTopWidth","transform","App","filterCalledByDate","cloneDeep","t","cn","curr","called","idxToRemove","findIndex","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ForceDarkMode","props","useColorMode","colorMode","toggleColorMode","useEffect","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2b673200.chunk.js","sourcesContent":["import { Button, Text, Flex, HStack, Box, SimpleGrid, Grid, GridItem, Table, Thead, Td, Tbody, Tr, Th, Heading, ButtonGroup, Accordion, AccordionItem, AccordionButton, AccordionIcon, AccordionPanel, Input, InputGroup, InputLeftElement, useToast, FormLabel, Tag, ModalOverlay, Modal, ModalContent, ModalHeader, useDisclosure, ModalCloseButton, ModalFooter, VStack } from '@chakra-ui/react';\r\nimport { FaFileImport, FaFileExport, FaEyeSlash, FaEye, FaCalculator, FaInfoCircle, FaCalendar, FaTrash } from \"react-icons/fa\";\r\nimport { GiCartwheel } from \"react-icons/gi\";\r\nimport { BsArrowRight, BsCircleHalf, BsSquareHalf, BsTriangleHalf } from \"react-icons/bs\"\r\nimport { AiOutlineBorderBottom, AiOutlineBorderHorizontal, AiOutlineBorderLeft, AiOutlineBorderRight, AiOutlineBorderTop, AiOutlineBorderVerticle } from \"react-icons/ai\";\r\nimport React, { createRef, useState } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./react-datepicker.css\";\r\nimport _ from 'lodash';\r\nimport { Bar, BarChart, CartesianGrid, ResponsiveContainer, Tooltip, TooltipProps, XAxis, YAxis } from 'recharts';\r\n\r\nimport \"./recharts.css\"\r\nimport { NameType, ValueType } from 'recharts/types/component/DefaultTooltipContent';\r\n\r\nconst MS_PER_MINUTE = 60000;\r\n\r\n// ####################################\r\n// ## Type Declarations\r\n// ####################################\r\n\r\nenum NumberColor {\r\n  Red,\r\n  Black,\r\n  Green\r\n}\r\n\r\ntype RouletteNumber = {\r\n  value: string,\r\n  color: NumberColor\r\n}\r\n\r\ntype CalledNumber = {\r\n  time: Date,\r\n  number: RouletteNumber\r\n}\r\n\r\ntype BarChartDataType = {\r\n  name: string,\r\n  amt: number,\r\n  fill: string,\r\n  stroke: string\r\n}\r\n\r\nconst rouletteNumbers: RouletteNumber[][] = [\r\n  // Top row\r\n  [\r\n    { value: \"00\", color: NumberColor.Green },\r\n    { value: \"3\", color: NumberColor.Red},\r\n    { value: \"6\", color: NumberColor.Black},\r\n    { value: \"9\", color: NumberColor.Red},\r\n    { value: \"12\", color: NumberColor.Red},\r\n    { value: \"15\", color: NumberColor.Black},\r\n    { value: \"18\", color: NumberColor.Red},\r\n    { value: \"21\", color: NumberColor.Red},\r\n    { value: \"24\", color: NumberColor.Black},\r\n    { value: \"27\", color: NumberColor.Red},\r\n    { value: \"30\", color: NumberColor.Red},\r\n    { value: \"33\", color: NumberColor.Black},\r\n    { value: \"36\", color: NumberColor.Red}\r\n  ],\r\n\r\n  // Mid row\r\n  [\r\n    { value: \"2\", color: NumberColor.Black},\r\n    { value: \"5\", color: NumberColor.Red},\r\n    { value: \"8\", color: NumberColor.Black},\r\n    { value: \"11\", color: NumberColor.Black},\r\n    { value: \"14\", color: NumberColor.Red},\r\n    { value: \"17\", color: NumberColor.Black},\r\n    { value: \"20\", color: NumberColor.Black},\r\n    { value: \"23\", color: NumberColor.Red},\r\n    { value: \"26\", color: NumberColor.Black},\r\n    { value: \"29\", color: NumberColor.Black},\r\n    { value: \"32\", color: NumberColor.Red},\r\n    { value: \"35\", color: NumberColor.Black}\r\n  ],\r\n\r\n  // Bot row\r\n  [\r\n    { value: \"0\", color: NumberColor.Green },\r\n    { value: \"1\", color: NumberColor.Red},\r\n    { value: \"4\", color: NumberColor.Black},\r\n    { value: \"7\", color: NumberColor.Red},\r\n    { value: \"10\", color: NumberColor.Black},\r\n    { value: \"13\", color: NumberColor.Black},\r\n    { value: \"16\", color: NumberColor.Red},\r\n    { value: \"19\", color: NumberColor.Red},\r\n    { value: \"22\", color: NumberColor.Black},\r\n    { value: \"25\", color: NumberColor.Red},\r\n    { value: \"28\", color: NumberColor.Black},\r\n    { value: \"31\", color: NumberColor.Black},\r\n    { value: \"34\", color: NumberColor.Red}\r\n  ]\r\n];\r\n\r\n\r\n// ####################################\r\n// ## Component Declarations\r\n// ####################################\r\n\r\nconst dateToString = (date: Date) => {\r\n  var options: Intl.DateTimeFormatOptions = {\r\n    year: \"2-digit\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\"\r\n  }\r\n  return date.toLocaleDateString(\"en-GB\", options);\r\n}\r\n\r\nconst getButtonBackgroundColor = (colorProp: NumberColor) => {\r\n  return colorProp === NumberColor.Red\r\n    ? \"red\"\r\n    : colorProp === NumberColor.Black\r\n      ? \"black\"\r\n      : \"green\";\r\n}\r\n\r\nconst getButtonHoverBackgroundColor = (colorProp: NumberColor) => {\r\n  return colorProp === NumberColor.Red\r\n    ? \"red.500\"\r\n    : colorProp === NumberColor.Black\r\n      ? \"blackAlpha.600\"\r\n      : \"green.500\";\r\n}\r\n\r\ntype RouletteNumberButtonProps = {\r\n  number: RouletteNumber,\r\n  onClick: (value: RouletteNumber) => void\r\n}\r\nconst RouletteNumberButton = ({number, onClick}: RouletteNumberButtonProps) => {\r\n  return (\r\n    <Button\r\n      backgroundColor={getButtonBackgroundColor(number.color)}\r\n      _hover={{backgroundColor: getButtonHoverBackgroundColor(number.color)}}\r\n      color=\"white\"\r\n      width=\"50px\"\r\n      height=\"100%\"\r\n      borderRadius=\"sm\"\r\n      onClick={() => onClick(number)}\r\n    >\r\n      {number.value}\r\n    </Button>\r\n  )\r\n}\r\n\r\ntype HeaderProps = {\r\n  calledNumbers: CalledNumber[],\r\n  setCalledNumbers: (newCalledNumbers: CalledNumber[]) => void\r\n}\r\nconst Header = ({ calledNumbers, setCalledNumbers }: HeaderProps) => {\r\n  const toast = useToast();\r\n  \r\n  const onImport = () => {\r\n    importInputRef.current?.click();\r\n  }\r\n\r\n  const onExport = () => {\r\n    var stringedCalledNumbers = calledNumbers.map(x => JSON.stringify(x)).join(\"~\");\r\n    \r\n    const elem = document.createElement(\"a\");\r\n    const file = new Blob(\r\n      [stringedCalledNumbers],\r\n      {type : \"text/plain\"}\r\n    );\r\n    elem.href = URL.createObjectURL(file);\r\n    elem.download = `rlte-${new Date().toISOString()}.txt`;\r\n    document.body.appendChild(elem);\r\n    elem.click();\r\n  }\r\n  const loadFile = (e: any) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      let file = e.target.files[0];\r\n      const reader = new FileReader();\r\n      \r\n      reader.onload = () => {\r\n        var loaded = reader.result as string;\r\n        var split = loaded.split(\"~\");\r\n        \r\n        try {\r\n          var parsed: CalledNumber[] = split.map(x => {\r\n            var parsedX = JSON.parse(x);\r\n            return {\r\n              number: parsedX.number,\r\n              time: new Date(parsedX.time)\r\n            }\r\n          });\r\n          \r\n          var array = [...calledNumbers, ...parsed];\r\n          array.sort((a: CalledNumber, b: CalledNumber) => {\r\n            return a.time.getTime() - b.time.getTime();\r\n          });\r\n\r\n          array = array.filter((x, idx) => array.map(y => y.time.getTime()).indexOf(x.time.getTime()) === idx);\r\n          setCalledNumbers(array);\r\n        } catch (err) {\r\n          toast({\r\n            description: \"Invalid file.\",\r\n            position: \"top\",\r\n            status: \"error\",\r\n            duration: 3000,\r\n            isClosable: true\r\n          })\r\n        }\r\n      }\r\n      reader.readAsText(file);\r\n\r\n    }\r\n  }\r\n\r\n  const importInputRef = createRef<HTMLInputElement>();\r\n\r\n  return (\r\n    <Flex backgroundColor=\"gray.900\" alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n    >\r\n      <Flex paddingX={2} paddingY={4} marginLeft={4}\r\n        alignItems=\"center\" fontSize=\"2xl\"\r\n      >\r\n        <GiCartwheel />\r\n        <Text ml={2} fontWeight=\"bold\"         \r\n          color=\"white\" fontSize=\"md\"\r\n        >\r\n          RLTE\r\n        </Text>\r\n      </Flex>\r\n\r\n      <ButtonGroup variant=\"outline\" size=\"sm\" mr={2} colorScheme=\"cyan\">\r\n        <Button leftIcon={<FaFileImport />}\r\n          onClick={() => onImport()}\r\n        >Import</Button>\r\n        <Input type=\"file\" accept=\"text/plain\"\r\n          onChange={e => loadFile(e)}\r\n          ref={importInputRef}\r\n          display=\"none\"\r\n        />\r\n        <Button leftIcon={<FaFileExport />}\r\n          onClick={() => onExport()}\r\n        >Export</Button>\r\n      </ButtonGroup>\r\n    </Flex>\r\n\r\n  )\r\n}\r\n\r\ntype RouletteTableProps = {\r\n  appendToCalled: (num: RouletteNumber) => void\r\n}\r\nconst RouletteTable = ({ appendToCalled }: RouletteTableProps) => {\r\n  return (\r\n    <Flex maxWidth=\"700px\" justifyContent=\"center\" mt={3}>\r\n      <Grid\r\n        templateRows=\"repeat(6, 1fr)\"\r\n        templateColumns=\"repeat(13, 1fr)\"\r\n        gap={1}\r\n        height=\"180px\"\r\n      >\r\n        {\r\n          rouletteNumbers.map(x => \r\n            x.map(y => \r\n              <GridItem key={y.value === \"00\"\r\n                ? 37\r\n                : y.value === \"0\"\r\n                  ? 38\r\n                  : y.value\r\n                } rowSpan={y.value === \"00\" || y.value === \"0\" ? 3 : 2} colSpan={1}\r\n              >\r\n                <RouletteNumberButton\r\n                  number={y}\r\n                  onClick={appendToCalled}\r\n                />\r\n              </GridItem>\r\n            )\r\n          )\r\n        }\r\n      </Grid>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ntype ToolsAccordionProps = {\r\n  filteredStartDate: Date | undefined,\r\n  filteredEndDate: Date | undefined,\r\n  setFilteredStartDate: (newDate: Date | undefined) => void,\r\n  setFilteredEndDate: (newDate: Date | undefined) => void,\r\n}\r\nconst ToolsAccordion = ({ filteredStartDate, filteredEndDate, setFilteredStartDate, setFilteredEndDate }: ToolsAccordionProps) => {\r\n  const [numberOfBets, setNumberOfBets] = useState<number>(0);\r\n  const [startingBet, setStartingBet] = useState<number>(0);\r\n  const totalNeeded = () => {\r\n    var sum = startingBet;\r\n    for (var i = 1; i <= numberOfBets; i++) {\r\n      sum *= 2;\r\n    }\r\n\r\n    return sum - startingBet;\r\n  }\r\n\r\n  const [startDate, setStartDate] = useState<Date | undefined>(undefined);\r\n  const [endDate, setEndDate] = useState<Date | undefined>(undefined);\r\n\r\n  const [isFiltered, setIsFiltered] = useState(false);\r\n\r\n  const onClickApply = () => {\r\n    setFilteredStartDate(startDate);\r\n    setFilteredEndDate(endDate);\r\n    setIsFiltered(true);\r\n  }\r\n\r\n  const onClickLastXTime = (minutes: number) => {\r\n    var closest15Mins = getClosest15Mins(new Date(), \"ceil\");\r\n    var oneHourAgo = new Date(closest15Mins.getTime() - (minutes * MS_PER_MINUTE));\r\n\r\n    setStartDate(oneHourAgo);\r\n    setEndDate(closest15Mins);\r\n    setFilteredStartDate(oneHourAgo);\r\n    setFilteredEndDate(closest15Mins);\r\n    setIsFiltered(true);\r\n  }\r\n\r\n  const onClickClear = () => {\r\n    setStartDate(undefined);\r\n    setEndDate(undefined);\r\n    setFilteredStartDate(undefined);\r\n    setFilteredEndDate(undefined);\r\n    setIsFiltered(false);\r\n  }\r\n\r\n  const getClosest15Mins = (date: Date, type: \"round\" | \"ceil\" | \"floor\") => {\r\n    var d = _.clone(date);\r\n    var minutes = date.getMinutes();\r\n    var hours = date.getHours();\r\n\r\n    var m = (Math.floor(minutes/15) * 15) % 60;\r\n    var h = minutes > 52 ? (hours === 23 ? 0 : hours + 1) : hours;\r\n    if (type === \"round\") {\r\n      m = (Math.round(minutes/15) * 15) % 60;\r\n    } else if (type === \"ceil\") {\r\n      m = (Math.ceil(minutes/15) * 15) % 60;\r\n      if (m === 0 && h !== hours + 1) {\r\n        h = hours + 1;\r\n      }\r\n    }\r\n    else {\r\n      h = hours;\r\n    }\r\n\r\n    d.setMinutes(m, 0, 0);\r\n    d.setHours(h);\r\n    return d;\r\n  }\r\n\r\n  return (\r\n    <Accordion mt={4} allowMultiple>\r\n      <AccordionItem>\r\n        <AccordionButton>\r\n          <Flex alignItems=\"center\" flex={1}>\r\n            <FaCalculator />\r\n            <Text ml={4}>Double Down Calculator</Text>\r\n          </Flex>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Flex flexDir=\"column\">\r\n            <Flex display=\"flex\" alignItems=\"center\">\r\n              <Text minW=\"35px\">I want to be safe for</Text>\r\n              <Input size=\"lg\" variant=\"flushed\" placeholder=\"#\" type=\"number\"\r\n                maxW=\"75px\" textAlign=\"center\"\r\n                mx={2}\r\n                onChange={(e) => setNumberOfBets(parseInt(e.target.value))}\r\n              />\r\n              \r\n              <Text minW=\"225px\">bets, with a starting bet of</Text>\r\n              <InputGroup maxW=\"150px\" mx={2} size=\"lg\" >\r\n                <InputLeftElement\r\n                  maxW=\"20px\"\r\n                  pointerEvents='none'\r\n                  height=\"100%\"\r\n                  children='$'\r\n                />\r\n                <Input variant=\"flushed\" placeholder=\"123456\" type=\"number\"\r\n                  onChange={(e) => setStartingBet(parseInt(e.target.value))}\r\n                  textAlign=\"center\"\r\n                />\r\n              </InputGroup>\r\n              <Text>.</Text>\r\n            </Flex>\r\n\r\n            <Flex mt={4} alignItems=\"center\">\r\n              <Text fontWeight=\"bold\">You will need:</Text>\r\n              <Text ml={8} fontSize=\"2xl\">${totalNeeded()}</Text>\r\n            </Flex>\r\n          </Flex>\r\n        </AccordionPanel>\r\n      </AccordionItem>\r\n      <AccordionItem>\r\n        <AccordionButton>\r\n          <Flex alignItems=\"center\" flex={1}>\r\n            <FaCalendar />\r\n            <Text ml={4}>Filter by Date</Text>\r\n          </Flex>\r\n          {\r\n            isFiltered\r\n            ? <Flex alignItems=\"center\" mr={2}>\r\n              {\r\n                (filteredStartDate && <Tag colorScheme=\"cyan\">{dateToString(filteredStartDate)}</Tag>)\r\n                || <Tag colorScheme=\"cyan\">No start date</Tag>\r\n              }\r\n              <Box mx={2}><BsArrowRight /></Box>\r\n              {\r\n                (filteredEndDate && <Tag colorScheme=\"cyan\">{dateToString(filteredEndDate)}</Tag>)\r\n                || <Tag colorScheme=\"cyan\">No end date</Tag>\r\n              }\r\n            </Flex>\r\n            : null\r\n          }\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Flex flexDirection=\"column\">\r\n            <Flex alignItems=\"center\">\r\n              <FormLabel mb={0} mr={2} flex={1}>Date Range:</FormLabel>\r\n              <ReactDatePicker\r\n                dateFormat=\"dd/MM/yy HH:mm\"\r\n                selected={startDate}\r\n                onChange={(date) => setStartDate(date as Date)}\r\n                selectsStart\r\n\r\n                showTimeSelect\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                maxDate={endDate}\r\n                \r\n                timeFormat=\"HH:mm\"\r\n                timeIntervals={15}\r\n\r\n                placeholderText=\"Start Date...\"\r\n              />\r\n              <Box flex={0} mx={4}><BsArrowRight /></Box>\r\n              <ReactDatePicker\r\n                dateFormat=\"dd/MM/yy HH:mm\"\r\n                selected={endDate}\r\n                onChange={(date) => setEndDate(date as Date)}\r\n                selectsEnd\r\n\r\n                showTimeSelect\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                minDate={startDate}\r\n\r\n                timeFormat=\"HH:mm\"\r\n                timeIntervals={15}\r\n\r\n                placeholderText=\"End Date...\"\r\n              />\r\n\r\n              <Button size=\"sm\" colorScheme=\"cyan\" variant=\"outline\" ml={4}\r\n                onClick={onClickApply} isDisabled={!startDate && !endDate}\r\n              >\r\n                Apply\r\n              </Button>\r\n            </Flex>\r\n            <Flex mt={4} alignContent=\"center\">\r\n              <FormLabel mb={0} mr={2} flex={1} alignSelf=\"center\">Quick Filter:</FormLabel>\r\n              <ButtonGroup colorScheme=\"cyan\" size=\"sm\" variant=\"outline\">\r\n                <Button onClick={() => onClickLastXTime(60)}>Last hour</Button>\r\n                <Button onClick={() => onClickLastXTime(30)}>Last 30 mins</Button>\r\n                <Button onClick={() => onClickLastXTime(15)}>Last 15 mins</Button>\r\n                <Button colorScheme=\"red\" onClick={onClickClear}>Clear</Button>\r\n              </ButtonGroup>\r\n            </Flex>\r\n          </Flex>\r\n        </AccordionPanel>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  )\r\n}\r\n\r\ntype RecentlyCalledProps = {\r\n  calledNumbers: CalledNumber[]\r\n  removeCalledNumber: (number: CalledNumber) => void\r\n}\r\nconst RecentlyCalled = ({ calledNumbers, removeCalledNumber }: RecentlyCalledProps) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [activeNumber, setActiveNumber] = useState<CalledNumber>({time: new Date(), number: { value: \"1\", color: NumberColor.Red }});\r\n  const [showNumber, setShowNumber] = useState(true);\r\n\r\n  const onClickHandle = (number: CalledNumber) => {\r\n    setActiveNumber(number);\r\n    onOpen();\r\n  }\r\n\r\n  const onDeleteConfirm = (number: CalledNumber) => {\r\n    removeCalledNumber(number);\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Flex flexDir=\"column\" mr={2}>\r\n      <Flex alignItems=\"center\" mb={2} justifyContent=\"space-between\">\r\n        <Flex alignItems=\"center\">\r\n          <Heading size=\"md\">Recently Called:</Heading>\r\n          <Button ml={2}\r\n            size=\"sm\"\r\n            onClick={() => setShowNumber(!showNumber)}\r\n            leftIcon={showNumber ? <FaEyeSlash /> : <FaEye />}\r\n            mr={2}\r\n          >\r\n            Toggle Text\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n      <Flex border=\"1px solid white\" boxShadow=\"0 0 0 1px white inset\" justifyContent=\"center\"\r\n        borderRadius=\"md\"\r\n        h=\"188px\" overflow=\"hidden\"\r\n      >\r\n        {\r\n          calledNumbers.length === 0\r\n          ? <Flex alignItems=\"center\">\r\n                <FaInfoCircle />\r\n                <Text ml={2}>No numbers called.</Text>\r\n          </Flex>\r\n          : <Flex overflowY=\"auto\"  flex={1} height=\"inherit\"\r\n            p={2} border=\"1px solid white\" \r\n          ><SimpleGrid columns={10} gap={1} flex={1} height=\"0%\" maxH=\"20px\"\r\n            _after={{\r\n              content: '\" \"',\r\n              display: \"block\",\r\n              width: \"100%\",\r\n              height: \"25px\",\r\n              marginTop: \"10px\"\r\n            }}\r\n          >\r\n            {\r\n              calledNumbers.slice().reverse().map(x => \r\n                <Button key={x.time.getTime().toString()}\r\n                  size=\"sm\" height=\"25px\" width=\"26px\"\r\n                  backgroundColor={getButtonBackgroundColor(x.number.color)}\r\n                  _hover={{backgroundColor: getButtonHoverBackgroundColor(x.number.color)}}\r\n                  padding={0}\r\n                  paddingInlineStart={0}\r\n                  paddingInlineEnd={0}\r\n                  minW={0}\r\n                  onClick={() => onClickHandle(x)}\r\n                >\r\n                  {\r\n                    showNumber ? x.number.value : null\r\n                  }\r\n                </Button>\r\n              )\r\n            }\r\n          </SimpleGrid></Flex>\r\n        }\r\n      </Flex>\r\n    </Flex>\r\n\r\n    <Modal isOpen={isOpen} onClose={onClose}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>\r\n          <Flex>\r\n            <Text>Delete</Text>\r\n            <Box backgroundColor={getButtonBackgroundColor(activeNumber.number.color)}\r\n              width=\"35px\" textAlign=\"center\"\r\n              mx={2} borderRadius=\"md\"\r\n            >\r\n              {activeNumber.number.value}\r\n            </Box>\r\n            <Text>called at {dateToString(activeNumber.time)}?</Text>\r\n          </Flex>\r\n        </ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalFooter>\r\n          <ButtonGroup size=\"sm\" justifyContent=\"space-between\">\r\n            <Button variant=\"ghost\" onClick={onClose}>Cancel</Button>\r\n            <Button variant=\"outline\" colorScheme=\"red\"\r\n              leftIcon={<FaTrash />}\r\n              onClick={() => onDeleteConfirm(activeNumber)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </ButtonGroup>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\ntype DistributionGraphProps = {\r\n  calledNumbers: CalledNumber[]\r\n}\r\nconst DistributionGraph = ({ calledNumbers }: DistributionGraphProps) => {\r\n  const mapCalledNumbersToGraphData = () => {\r\n    var flattenedRouletteNumbers = rouletteNumbers.reduce((accumulator, value) => accumulator.concat(value), [])\r\n    \r\n    var data: BarChartDataType[] = flattenedRouletteNumbers.map(x => {\r\n      var count = calledNumbers.reduce((acc, {number}) => x.value === number.value ? ++acc : acc, 0);\r\n\r\n      return {\r\n        name: x.value,\r\n        amt: count,\r\n        fill: getButtonBackgroundColor(x.color),\r\n        stroke: x.color === NumberColor.Black ? \"var(--chakra-colors-gray-500)\" : \"\"\r\n      };\r\n    });\r\n\r\n    data.sort((a : BarChartDataType, b: BarChartDataType) => {\r\n      return parseInt(a.name) < (parseInt(b.name)) ? -1 : 1;\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  const CustomGraphTooltip = ({ active, payload, label }: TooltipProps<ValueType, NameType>) => {\r\n    if (active) {\r\n      var rouletteNumber = rouletteNumbers.reduce((accumulator, value) => accumulator.concat(value), []).find(x => x.value === label)!\r\n      var val = payload![0].value!;\r\n      var percentage = Math.round((val as number / calledNumbers.length) * 10000) / 100;\r\n      return (\r\n        <Flex\r\n          color=\"gray.900\"\r\n          backgroundColor=\"gray.300\"\r\n          paddingX={2}\r\n          paddingY={1}\r\n          fontSize=\"sm\"\r\n          fontWeight=\"medium\"\r\n          borderRadius=\"sm\"\r\n          boxShadow=\"md\"\r\n          maxW=\"320px\"\r\n        >\r\n          <Text backgroundColor={getButtonBackgroundColor(rouletteNumber.color)}\r\n            color=\"white\" borderRadius=\"md\" width=\"26px\" textAlign=\"center\"\r\n            mr={2}\r\n          >\r\n            {label}\r\n          </Text>\r\n          <Text mr={2}>Called:</Text>\r\n          <Text>{val} ({percentage}%)</Text>\r\n        </Flex>\r\n      );\r\n    }\r\n  \r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <Flex mt={4} flexDirection=\"column\">\r\n      <Heading size=\"md\" mb={4}>Distribution:</Heading>\r\n      <ResponsiveContainer width=\"96%\" height={250}>\r\n        <BarChart\r\n          width={500}\r\n          height={400}\r\n          data={mapCalledNumbersToGraphData()}\r\n        >\r\n          <CartesianGrid vertical={false} stroke=\"var(--chakra-colors-gray-700)\" />\r\n          <XAxis dataKey=\"name\" stroke=\"var(--chakra-colors-gray-200)\" type={\"category\"} interval={1}\r\n            angle={-90} tick={{ fontSize: 14, dx: -5, dy: 10 }}\r\n          />\r\n          <YAxis allowDecimals={false} width={30} stroke=\"var(--chakra-colors-gray-200)\" />\r\n          <Bar dataKey=\"amt\" />\r\n          <Tooltip content={<CustomGraphTooltip />} />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ntype StatsTableProps = {\r\n  calledNumbers: CalledNumber[]\r\n}\r\nconst StatsTable = ({ calledNumbers }: StatsTableProps) => {\r\n  const getCountByColor = (color: NumberColor) => {\r\n    return calledNumbers.filter(x => x.number.color === color).length;\r\n  }\r\n\r\n  const getCountByModulo = (modulo: number, shouldEqual: number) => {\r\n    return calledNumbers.filter(x => parseInt(x.number.value) > 0 && parseInt(x.number.value) % modulo === shouldEqual).length;\r\n  }\r\n\r\n  const getCountByRange = (start: number, end: number) => {\r\n    return calledNumbers.filter(x => parseInt(x.number.value) >= start && parseInt(x.number.value) <= end).length;\r\n  }\r\n\r\n  const getPercentageOfTotal = (count: number) => {\r\n    return Math.round((count / calledNumbers.length) * 10000) / 100;\r\n  }\r\n\r\n  return (\r\n    <Flex flex={1} borderLeft=\"1px solid var(--chakra-colors-gray-700)\" margin={0} marginInlineStart=\"0 !important\"\r\n      paddingX={2} flexDir=\"column\"\r\n    >\r\n      <Heading size=\"md\" mb={2} ml={4}>Statistics:</Heading>\r\n      <Table size=\"sm\">\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Name</Th>\r\n            <Th isNumeric>Count</Th>\r\n            <Th isNumeric>% of Total</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          <Tr>\r\n            <Td>Total</Td>\r\n            <Td isNumeric>{calledNumbers.length}</Td>\r\n            <Td isNumeric>-</Td>\r\n          </Tr>\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex backgroundColor=\"red\" width=\"15px\" height=\"15px\"\r\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\r\n                />\r\n                Red\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByColor(NumberColor.Red)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Red))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex backgroundColor=\"black\" width=\"15px\" height=\"15px\"\r\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\r\n                />\r\n                Black\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByColor(NumberColor.Black)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Black))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex backgroundColor=\"green\" width=\"15px\" height=\"15px\"\r\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\r\n                />\r\n                Green\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByColor(NumberColor.Green)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Green))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2}>\r\n                  <BsSquareHalf />\r\n                </Flex>\r\n                Even\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(2, 0)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(2, 0))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2}><BsTriangleHalf /></Flex>\r\n                Odd\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(2, 1)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(2, 1))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2}><BsCircleHalf /></Flex>\r\n                1-18\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(1, 18)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(1, 18))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2} transform=\"rotate(180deg)\"><BsCircleHalf /></Flex>\r\n                19-36\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(19, 36)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(19, 36))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderLeft /></Flex>\r\n                1st 12\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(1, 12)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(1, 12))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderHorizontal /></Flex>\r\n                2nd 12\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(13, 24)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(13, 24))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderRight /></Flex>\r\n                3rd 12\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(25, 36)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(25, 36))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderTop /></Flex>\r\n                Top 2 to 1\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(3, 0)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 0))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderVerticle /></Flex>\r\n                Mid 2 to 1\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(3, 2)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 2))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderBottom /></Flex>\r\n                Bot 2 to 1\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(3, 1)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 1))} %</Td>\r\n          </Tr>\r\n\r\n        </Tbody>\r\n      </Table>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [calledNumbers, setCalledNumbers] = useState<CalledNumber[]>([]);\r\n\r\n  const [filteredStartDate, setFilteredStartDate] = useState<Date | undefined>(undefined);\r\n  const [filteredEndDate, setFilteredEndDate] = useState<Date | undefined>(undefined);\r\n  \r\n  const appendToCalled = (number: RouletteNumber) => {\r\n    var cn: CalledNumber = {\r\n      time: new Date(),\r\n      number: number\r\n    }\r\n    setCalledNumbers(curr => [...curr, cn]);\r\n  }\r\n\r\n  const removeCalledNumber = (number: CalledNumber) => {\r\n    var called = _.cloneDeep(calledNumbers);\r\n    var idxToRemove = called.findIndex(x => x.time.getTime() === number.time.getTime());\r\n    if (idxToRemove !== -1) {\r\n      called.splice(idxToRemove, 1);\r\n\r\n      setCalledNumbers(called);\r\n    }\r\n  }\r\n\r\n  const filterCalledByDate = (): CalledNumber[] => {\r\n    return _.cloneDeep(calledNumbers).filter(x => {\r\n      var t = x.time.getTime();\r\n      if (filteredStartDate && filteredStartDate.getTime() > t) {\r\n        return false;\r\n      }\r\n\r\n      if (filteredEndDate && filteredEndDate.getTime() < t) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Flex flexDir=\"column\" justifyContent=\"center\">\r\n      <Header\r\n        calledNumbers={calledNumbers}\r\n        setCalledNumbers={setCalledNumbers}\r\n      />\r\n      <Flex maxWidth=\"800px\" flexDir=\"column\" flex={1} alignSelf=\"center\"\r\n        padding={4}\r\n      >\r\n        <RouletteTable appendToCalled={appendToCalled} />\r\n        \r\n        <ToolsAccordion\r\n          filteredStartDate={filteredStartDate}\r\n          filteredEndDate={filteredEndDate}\r\n          setFilteredStartDate={setFilteredStartDate}\r\n          setFilteredEndDate={setFilteredEndDate}        \r\n        />\r\n        \r\n        <Flex mt={2} flexDir=\"column\">\r\n          <HStack flex={1} mt={2} alignItems=\"flex-start\">\r\n            \r\n            <Flex flexDir=\"column\" flex={1}>\r\n              <RecentlyCalled\r\n                calledNumbers={filterCalledByDate()}\r\n                removeCalledNumber={removeCalledNumber}\r\n              />\r\n\r\n              <DistributionGraph\r\n                calledNumbers={filterCalledByDate()}\r\n              />\r\n            </Flex>\r\n            \r\n            <StatsTable calledNumbers={filterCalledByDate()} />\r\n          </HStack>\r\n        </Flex>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ChakraProvider, useColorMode } from '@chakra-ui/react';\r\n\r\nconst ForceDarkMode = (props: { children: JSX.Element }) => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  useEffect(() => {\r\n    if (colorMode === \"dark\") return;\r\n    toggleColorMode();\r\n  }, [colorMode, toggleColorMode]);\r\n\r\n  return props.children;\r\n}\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <ForceDarkMode>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n    </ForceDarkMode>\r\n  </ChakraProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}