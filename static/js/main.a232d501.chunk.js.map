{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberColor","RouletteNumberButton","number","onClick","backgroundColor","color","Red","Black","hoverBackgroundColor","_hover","width","height","borderRadius","value","Header","calledNumbers","setCalledNumbers","toast","useToast","importInputRef","createRef","alignItems","justifyContent","paddingX","paddingY","marginLeft","fontSize","ml","fontWeight","variant","size","mr","colorScheme","leftIcon","current","click","onImport","type","accept","onChange","e","target","files","length","file","reader","FileReader","onload","split","result","parsed","map","x","parsedX","JSON","parse","time","Date","array","sort","a","b","getTime","filter","idx","y","indexOf","err","description","position","status","duration","isClosable","readAsText","loadFile","ref","display","stringedCalledNumbers","stringify","join","elem","document","createElement","Blob","href","URL","createObjectURL","download","toISOString","body","appendChild","onExport","RouletteTable","appendToCalled","rouletteNumbers","Green","maxWidth","mt","templateRows","templateColumns","gap","rowSpan","colSpan","ToolsAccordion","useState","numberOfBets","setNumberOfBets","startingBet","setStartingBet","allowMultiple","flex","flexDir","minW","placeholder","maxW","textAlign","mx","parseInt","pointerEvents","children","sum","i","totalNeeded","RecentlyCalled","showNumber","setShowNumber","mb","columns","pr","maxH","overflowY","slice","reverse","toString","StatsTable","getCountByColor","getCountByModulo","modulo","shouldEqual","getCountByRange","start","end","getPercentageOfTotal","count","Math","round","borderLeft","margin","marginInlineStart","isNumeric","borderTopWidth","transform","App","alignSelf","padding","cn","curr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ForceDarkMode","props","useColorMode","colorMode","toggleColorMode","useEffect","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a232d501.chunk.js","sourcesContent":["import { Button, Text, Flex, HStack, Box, SimpleGrid, Grid, GridItem, Table, Thead, Td, Tbody, Tr, Th, Heading, ButtonGroup, Accordion, AccordionItem, AccordionButton, AccordionIcon, AccordionPanel, Input, InputGroup, InputLeftElement, useToast } from '@chakra-ui/react';\nimport { FaFileImport, FaFileExport, FaEyeSlash, FaEye, FaCalculator } from \"react-icons/fa\";\nimport { GiCartwheel } from \"react-icons/gi\";\nimport { BsCircleHalf, BsSquareHalf, BsTriangleHalf } from \"react-icons/bs\"\nimport { AiOutlineBorderBottom, AiOutlineBorderHorizontal, AiOutlineBorderLeft, AiOutlineBorderRight, AiOutlineBorderTop, AiOutlineBorderVerticle } from \"react-icons/ai\";\nimport React, { createRef, useState } from 'react';\nimport './App.css';\n\n// ####################################\n// ## Type Declarations\n// ####################################\n\nenum NumberColor {\n  Red,\n  Black,\n  Green\n}\n\ntype RouletteNumber = {\n  value: string,\n  color: NumberColor\n}\n\ntype CalledNumber = {\n  time: Date,\n  number: RouletteNumber\n}\n\n\n// ####################################\n// ## Component Declarations\n// ####################################\n\ntype RouletteNumberButtonProps = {\n  number: RouletteNumber,\n  onClick: (value: RouletteNumber) => void\n}\nconst RouletteNumberButton = ({number, onClick}: RouletteNumberButtonProps) => {\n  const backgroundColor = number.color === NumberColor.Red\n    ? \"red\"\n    : number.color === NumberColor.Black\n      ? \"black\"\n      : \"green\";\n  \n  const hoverBackgroundColor = number.color === NumberColor.Red\n    ? \"red.500\"\n    : number.color === NumberColor.Black\n      ? \"blackAlpha.600\"\n      : \"green.500\";\n  \n  return (\n    <Button\n      backgroundColor={backgroundColor}\n      _hover={{backgroundColor: hoverBackgroundColor}}\n      color=\"white\"\n      width=\"50px\"\n      height=\"100%\"\n      borderRadius=\"sm\"\n      onClick={() => onClick(number)}\n    >\n      {number.value}\n    </Button>\n  )\n}\n\ntype HeaderProps = {\n  calledNumbers: CalledNumber[],\n  setCalledNumbers: (newCalledNumbers: CalledNumber[]) => void\n}\nconst Header = ({ calledNumbers, setCalledNumbers }: HeaderProps) => {\n  const toast = useToast();\n  \n  const onImport = () => {\n    importInputRef.current?.click();\n  }\n\n  const onExport = () => {\n    var stringedCalledNumbers = calledNumbers.map(x => JSON.stringify(x)).join(\"~\");\n    \n    const elem = document.createElement(\"a\");\n    const file = new Blob(\n      [stringedCalledNumbers],\n      {type : \"text/plain\"}\n    );\n    elem.href = URL.createObjectURL(file);\n    elem.download = `rlte-${new Date().toISOString()}.txt`;\n    document.body.appendChild(elem);\n    elem.click();\n  }\n  const loadFile = (e: any) => {\n    if (e.target.files && e.target.files.length > 0) {\n      let file = e.target.files[0];\n      const reader = new FileReader();\n      \n      reader.onload = () => {\n        var loaded = reader.result as string;\n        var split = loaded.split(\"~\");\n        \n        try {\n          var parsed: CalledNumber[] = split.map(x => {\n            var parsedX = JSON.parse(x);\n            return {\n              number: parsedX.number,\n              time: new Date(parsedX.time)\n            }\n          });\n          \n          var array = [...calledNumbers, ...parsed];\n          array.sort((a: CalledNumber, b: CalledNumber) => {\n            return a.time.getTime() - b.time.getTime();\n          });\n\n          array = array.filter((x, idx) => array.map(y => y.time.getTime()).indexOf(x.time.getTime()) === idx);\n          setCalledNumbers(array);\n        } catch (err) {\n          toast({\n            description: \"Invalid file.\",\n            position: \"top\",\n            status: \"error\",\n            duration: 3000,\n            isClosable: true\n          })\n        }\n      }\n      reader.readAsText(file);\n\n    }\n  }\n\n  const importInputRef = createRef<HTMLInputElement>();\n  return (\n    <Flex backgroundColor=\"gray.900\" alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Flex paddingX={2} paddingY={4} marginLeft={4}\n        alignItems=\"center\" fontSize=\"2xl\"\n      >\n        <GiCartwheel />\n        <Text ml={2} fontWeight=\"bold\"         \n          color=\"white\" fontSize=\"md\"\n        >\n          RLTE\n        </Text>\n      </Flex>\n\n      <ButtonGroup variant=\"outline\" size=\"sm\" mr={2} colorScheme=\"cyan\">\n        <Button leftIcon={<FaFileImport />}\n          onClick={() => onImport()}\n        >Import</Button>\n        <Input type=\"file\" accept=\"text/plain\"\n          onChange={e => loadFile(e)}\n          ref={importInputRef}\n          display=\"none\"\n        />\n        <Button leftIcon={<FaFileExport />}\n          onClick={() => onExport()}\n        >Export</Button>\n      </ButtonGroup>\n    </Flex>\n\n  )\n}\n\ntype RouletteTableProps = {\n  appendToCalled: (num: RouletteNumber) => void\n}\nconst RouletteTable = ({ appendToCalled }: RouletteTableProps) => {\n  const rouletteNumbers: RouletteNumber[][] = [\n    // Top row\n    [\n      { value: \"00\", color: NumberColor.Green },\n      { value: \"3\", color: NumberColor.Red},\n      { value: \"6\", color: NumberColor.Black},\n      { value: \"9\", color: NumberColor.Red},\n      { value: \"12\", color: NumberColor.Red},\n      { value: \"15\", color: NumberColor.Black},\n      { value: \"18\", color: NumberColor.Red},\n      { value: \"21\", color: NumberColor.Red},\n      { value: \"24\", color: NumberColor.Black},\n      { value: \"27\", color: NumberColor.Red},\n      { value: \"30\", color: NumberColor.Red},\n      { value: \"33\", color: NumberColor.Black},\n      { value: \"36\", color: NumberColor.Red}\n    ],\n\n    // Mid row\n    [\n      { value: \"2\", color: NumberColor.Black},\n      { value: \"5\", color: NumberColor.Red},\n      { value: \"8\", color: NumberColor.Black},\n      { value: \"11\", color: NumberColor.Black},\n      { value: \"14\", color: NumberColor.Red},\n      { value: \"17\", color: NumberColor.Black},\n      { value: \"20\", color: NumberColor.Black},\n      { value: \"23\", color: NumberColor.Red},\n      { value: \"26\", color: NumberColor.Black},\n      { value: \"29\", color: NumberColor.Black},\n      { value: \"32\", color: NumberColor.Red},\n      { value: \"35\", color: NumberColor.Black}\n    ],\n\n    // Bot row\n    [\n      { value: \"0\", color: NumberColor.Green },\n      { value: \"1\", color: NumberColor.Red},\n      { value: \"4\", color: NumberColor.Black},\n      { value: \"7\", color: NumberColor.Red},\n      { value: \"10\", color: NumberColor.Black},\n      { value: \"13\", color: NumberColor.Black},\n      { value: \"16\", color: NumberColor.Red},\n      { value: \"19\", color: NumberColor.Red},\n      { value: \"22\", color: NumberColor.Black},\n      { value: \"25\", color: NumberColor.Red},\n      { value: \"28\", color: NumberColor.Black},\n      { value: \"31\", color: NumberColor.Black},\n      { value: \"34\", color: NumberColor.Red}\n    ]\n  ];\n\n  return (\n    <Flex maxWidth=\"700px\" justifyContent=\"center\" mt={4}>\n      <Grid\n        templateRows=\"repeat(6, 1fr)\"\n        templateColumns=\"repeat(13, 1fr)\"\n        gap={1}\n        height=\"180px\"\n      >\n        {\n          rouletteNumbers.map(x => \n            x.map(y => \n              <GridItem key={y.value === \"00\"\n                ? 37\n                : y.value === \"0\"\n                  ? 38\n                  : y.value\n                } rowSpan={y.value === \"00\" || y.value === \"0\" ? 3 : 2} colSpan={1}\n              >\n                <RouletteNumberButton\n                  number={y}\n                  onClick={appendToCalled}\n                />\n              </GridItem>\n            )\n          )\n        }\n      </Grid>\n    </Flex>\n  )\n}\n\nconst ToolsAccordion = () => {\n  const [numberOfBets, setNumberOfBets] = useState<number>(0);\n  const [startingBet, setStartingBet] = useState<number>(0);\n  const totalNeeded = () => {\n    var sum = startingBet;\n    for (var i = 1; i <= numberOfBets; i++) {\n      sum *= 2;\n    }\n\n    return sum - startingBet;\n  }\n\n  return (\n    <Accordion mt={4} allowMultiple>\n      <AccordionItem>\n        <AccordionButton>\n          <Flex alignItems=\"center\" flex={1}>\n            <FaCalculator />\n            <Text ml={4}>Double Down Calculator</Text>\n          </Flex>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Flex flexDir=\"column\">\n            <Flex display=\"flex\" alignItems=\"center\">\n              <Text minW=\"35px\">I want</Text>\n              <Input size=\"lg\" variant=\"flushed\" placeholder=\"#\" type=\"number\"\n                maxW=\"75px\" textAlign=\"center\"\n                mx={2}\n                onChange={(e) => setNumberOfBets(parseInt(e.target.value))}\n              />\n              \n              <Text minW=\"225px\">max bets, with a starting bet of</Text>\n              <InputGroup maxW=\"150px\" mx={2} size=\"lg\" >\n                <InputLeftElement\n                  maxW=\"20px\"\n                  pointerEvents='none'\n                  height=\"100%\"\n                  children='$'\n                />\n                <Input variant=\"flushed\" placeholder=\"123456\" type=\"number\"\n                  onChange={(e) => setStartingBet(parseInt(e.target.value))}\n                  textAlign=\"center\"\n                />\n              </InputGroup>\n              <Text>.</Text>\n            </Flex>\n\n            <Flex mt={4} alignItems=\"center\">\n              <Text fontWeight=\"bold\">You will need:</Text>\n              <Text ml={8} fontSize=\"2xl\">${totalNeeded()}</Text>\n            </Flex>\n          </Flex>\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n\ntype RecentlyCalledProps = {\n  calledNumbers: CalledNumber[]\n}\nconst RecentlyCalled = ({ calledNumbers }: RecentlyCalledProps) => {\n  const [showNumber, setShowNumber] = useState(true);\n\n  return (\n    <Flex flexDir=\"column\">\n      <Flex alignItems=\"center\" mb={2}>\n        <Heading size=\"md\">Recently Called:</Heading>\n        <Button ml={2}\n          size=\"sm\"\n          onClick={() => setShowNumber(!showNumber)}\n          leftIcon={showNumber ? <FaEyeSlash /> : <FaEye />}\n        >\n          Toggle Text\n        </Button>\n      </Flex>\n      {\n        calledNumbers.length === 0\n        ? <Flex flex={1}>None called.</Flex>\n        : <SimpleGrid columns={10} flex={1} gap={1} pr={2}\n          mr={2} maxH=\"188px\" overflowY=\"auto\"\n        >\n          {\n            calledNumbers.slice().reverse().map(x => \n              <Box key={x.time.getTime().toString()}\n                textAlign=\"center\"\n                color=\"white\"\n                borderRadius=\"sm\"\n                width=\"29px\"\n                height=\"25px\"\n                backgroundColor={\n                  x.number.color === NumberColor.Red\n                  ? \"red\"\n                  : x.number.color === NumberColor.Black\n                    ? \"black\"\n                    : \"green\"\n                }\n                fontWeight=\"semibold\"\n              >\n                {\n                  showNumber ? x.number.value : null\n                }\n              </Box>\n            )\n          }\n        </SimpleGrid>\n      }\n    </Flex>\n  )\n}\n\ntype StatsTableProps = {\n  calledNumbers: CalledNumber[]\n}\nconst StatsTable = ({ calledNumbers }: StatsTableProps) => {\n  const getCountByColor = (color: NumberColor) => {\n    return calledNumbers.filter(x => x.number.color === color).length;\n  }\n\n  const getCountByModulo = (modulo: number, shouldEqual: number) => {\n    return calledNumbers.filter(x => parseInt(x.number.value) > 0 && parseInt(x.number.value) % modulo === shouldEqual).length;\n  }\n\n  const getCountByRange = (start: number, end: number) => {\n    return calledNumbers.filter(x => parseInt(x.number.value) >= start && parseInt(x.number.value) <= end).length;\n  }\n\n  const getPercentageOfTotal = (count: number) => {\n    return Math.round((count / calledNumbers.length) * 10000) / 100;\n  }\n\n  return (\n    <Flex flex={1} borderLeft=\"1px solid var(--chakra-colors-gray-200)\" margin={0} marginInlineStart=\"0 !important\"\n      paddingX={2} flexDir=\"column\"\n    >\n      <Heading size=\"md\" mb={2} ml={4}>Statistics:</Heading>\n      <Table size=\"sm\">\n        <Thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th isNumeric>Count</Th>\n            <Th isNumeric>% of Total</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          <Tr>\n            <Td>Total</Td>\n            <Td isNumeric>{calledNumbers.length}</Td>\n            <Td isNumeric>-</Td>\n          </Tr>\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex backgroundColor=\"red\" width=\"15px\" height=\"15px\"\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\n                />\n                Red\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByColor(NumberColor.Red)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Red))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex backgroundColor=\"black\" width=\"15px\" height=\"15px\"\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\n                />\n                Black\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByColor(NumberColor.Black)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Black))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex backgroundColor=\"green\" width=\"15px\" height=\"15px\"\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\n                />\n                Green\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByColor(NumberColor.Green)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Green))} %</Td>\n          </Tr>\n\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"md\" mr={2}>\n                  <BsSquareHalf />\n                </Flex>\n                Even\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(2, 0)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(2, 0))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"md\" mr={2}><BsTriangleHalf /></Flex>\n                Odd\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(2, 1)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(2, 1))} %</Td>\n          </Tr>\n\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"md\" mr={2}><BsCircleHalf /></Flex>\n                1-18\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(1, 18)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(1, 18))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"md\" mr={2} transform=\"rotate(180deg)\"><BsCircleHalf /></Flex>\n                19-36\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(19, 36)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(19, 36))} %</Td>\n          </Tr>\n\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderLeft /></Flex>\n                1st 12\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(1, 12)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(1, 12))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderHorizontal /></Flex>\n                2nd 12\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(13, 24)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(13, 24))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderRight /></Flex>\n                3rd 12\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(25, 36)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(25, 36))} %</Td>\n          </Tr>\n\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderTop /></Flex>\n                Top 2 to 1\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(3, 0)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 0))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderVerticle /></Flex>\n                Mid 2 to 1\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(3, 2)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 2))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderBottom /></Flex>\n                Bot 2 to 1\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(3, 1)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 1))} %</Td>\n          </Tr>\n\n        </Tbody>\n      </Table>\n    </Flex>\n  )\n}\n\nconst App = () => {\n  const [calledNumbers, setCalledNumbers] = useState<CalledNumber[]>([]);\n  \n  const appendToCalled = (number: RouletteNumber) => {\n    var cn: CalledNumber = {\n      time: new Date(),\n      number: number\n    }\n    setCalledNumbers(curr => [...curr, cn]);\n  }\n\n  return (\n    <Flex flexDir=\"column\" justifyContent=\"center\">\n      <Header\n        calledNumbers={calledNumbers}\n        setCalledNumbers={setCalledNumbers}\n      />\n      <Flex maxWidth=\"800px\" flexDir=\"column\" flex={1} alignSelf=\"center\"\n        padding={4}\n      >\n        <RouletteTable appendToCalled={appendToCalled} />\n        \n        <ToolsAccordion />\n        \n        <Flex mt={2} flexDir=\"column\">\n          <HStack flex={1} mt={2} alignItems=\"flex-start\">\n            \n            <Flex flexDir=\"column\" flex={1}>\n              <RecentlyCalled calledNumbers={calledNumbers} />\n            </Flex>\n            \n            <StatsTable calledNumbers={calledNumbers} />\n          </HStack>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, useColorMode } from '@chakra-ui/react';\n\nconst ForceDarkMode = (props: { children: JSX.Element }) => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  useEffect(() => {\n    if (colorMode === \"dark\") return;\n    toggleColorMode();\n  }, [colorMode, toggleColorMode]);\n\n  return props.children;\n}\n\nReactDOM.render(\n  <ChakraProvider>\n    <ForceDarkMode>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    </ForceDarkMode>\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}