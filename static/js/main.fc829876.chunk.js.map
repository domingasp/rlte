{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberColor","dateToString","date","toLocaleDateString","year","month","day","hour","minute","getButtonBackgroundColor","colorProp","Red","Black","getButtonHoverBackgroundColor","RouletteNumberButton","number","onClick","backgroundColor","color","_hover","width","height","borderRadius","value","Header","calledNumbers","setCalledNumbers","toast","useToast","importInputRef","createRef","alignItems","justifyContent","paddingX","paddingY","marginLeft","fontSize","ml","fontWeight","variant","size","mr","colorScheme","leftIcon","current","click","onImport","type","accept","onChange","e","target","files","length","file","reader","FileReader","onload","split","result","parsed","map","x","parsedX","JSON","parse","time","Date","array","sort","a","b","getTime","filter","idx","y","indexOf","err","description","position","status","duration","isClosable","readAsText","loadFile","ref","display","stringedCalledNumbers","stringify","join","elem","document","createElement","Blob","href","URL","createObjectURL","download","toISOString","body","appendChild","onExport","RouletteTable","appendToCalled","rouletteNumbers","Green","maxWidth","mt","templateRows","templateColumns","gap","rowSpan","colSpan","ToolsAccordion","filteredStartDate","filteredEndDate","setFilteredStartDate","setFilteredEndDate","useState","numberOfBets","setNumberOfBets","startingBet","setStartingBet","undefined","startDate","setStartDate","endDate","setEndDate","isFiltered","setIsFiltered","onClickLastXTime","minutes","closest15Mins","getClosest15Mins","oneHourAgo","d","_","clone","getMinutes","hours","getHours","m","Math","floor","h","round","ceil","setMinutes","setHours","allowMultiple","flex","flexDir","minW","placeholder","maxW","textAlign","mx","parseInt","pointerEvents","children","sum","i","totalNeeded","flexDirection","mb","dateFormat","selected","selectsStart","showTimeSelect","maxDate","timeFormat","timeIntervals","placeholderText","selectsEnd","minDate","isDisabled","alignContent","alignSelf","RecentlyCalled","removeCalledNumber","useDisclosure","isOpen","onOpen","onClose","activeNumber","setActiveNumber","showNumber","setShowNumber","border","boxShadow","overflow","overflowY","p","columns","maxH","_after","content","marginTop","slice","reverse","padding","paddingInlineStart","paddingInlineEnd","toString","StatsTable","getCountByColor","getCountByModulo","modulo","shouldEqual","getCountByRange","start","end","getPercentageOfTotal","count","borderLeft","margin","marginInlineStart","isNumeric","borderTopWidth","transform","App","filterCalledByDate","cloneDeep","t","cn","curr","called","idxToRemove","findIndex","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ForceDarkMode","props","useColorMode","colorMode","toggleColorMode","useEffect","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fc829876.chunk.js","sourcesContent":["import { Button, Text, Flex, HStack, Box, SimpleGrid, Grid, GridItem, Table, Thead, Td, Tbody, Tr, Th, Heading, ButtonGroup, Accordion, AccordionItem, AccordionButton, AccordionIcon, AccordionPanel, Input, InputGroup, InputLeftElement, useToast, FormLabel, Tag, ModalOverlay, Modal, ModalContent, ModalHeader, useDisclosure, ModalCloseButton, ModalBody, ModalFooter } from '@chakra-ui/react';\nimport { FaFileImport, FaFileExport, FaEyeSlash, FaEye, FaCalculator, FaInfoCircle, FaCalendar, FaTrash } from \"react-icons/fa\";\nimport { GiCartwheel } from \"react-icons/gi\";\nimport { BsArrowRight, BsCircleHalf, BsSquareHalf, BsTriangleHalf } from \"react-icons/bs\"\nimport { AiOutlineBorderBottom, AiOutlineBorderHorizontal, AiOutlineBorderLeft, AiOutlineBorderRight, AiOutlineBorderTop, AiOutlineBorderVerticle } from \"react-icons/ai\";\nimport React, { createRef, useState } from 'react';\nimport './App.css';\nimport ReactDatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./react-datepicker.css\";\nimport _ from 'lodash';\n\nconst MS_PER_MINUTE = 60000;\n\n// ####################################\n// ## Type Declarations\n// ####################################\n\nenum NumberColor {\n  Red,\n  Black,\n  Green\n}\n\ntype RouletteNumber = {\n  value: string,\n  color: NumberColor\n}\n\ntype CalledNumber = {\n  time: Date,\n  number: RouletteNumber\n}\n\n\n// ####################################\n// ## Component Declarations\n// ####################################\n\nconst dateToString = (date: Date) => {\n  var options: Intl.DateTimeFormatOptions = {\n    year: \"2-digit\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n  }\n  return date.toLocaleDateString(\"en-GB\", options);\n}\n\nconst getButtonBackgroundColor = (colorProp: NumberColor) => {\n  return colorProp === NumberColor.Red\n    ? \"red\"\n    : colorProp === NumberColor.Black\n      ? \"black\"\n      : \"green\";\n}\n\nconst getButtonHoverBackgroundColor = (colorProp: NumberColor) => {\n  return colorProp === NumberColor.Red\n    ? \"red.500\"\n    : colorProp === NumberColor.Black\n      ? \"blackAlpha.600\"\n      : \"green.500\";\n}\n\ntype RouletteNumberButtonProps = {\n  number: RouletteNumber,\n  onClick: (value: RouletteNumber) => void\n}\nconst RouletteNumberButton = ({number, onClick}: RouletteNumberButtonProps) => {\n  return (\n    <Button\n      backgroundColor={getButtonBackgroundColor(number.color)}\n      _hover={{backgroundColor: getButtonHoverBackgroundColor(number.color)}}\n      color=\"white\"\n      width=\"50px\"\n      height=\"100%\"\n      borderRadius=\"sm\"\n      onClick={() => onClick(number)}\n    >\n      {number.value}\n    </Button>\n  )\n}\n\ntype HeaderProps = {\n  calledNumbers: CalledNumber[],\n  setCalledNumbers: (newCalledNumbers: CalledNumber[]) => void\n}\nconst Header = ({ calledNumbers, setCalledNumbers }: HeaderProps) => {\n  const toast = useToast();\n  \n  const onImport = () => {\n    importInputRef.current?.click();\n  }\n\n  const onExport = () => {\n    var stringedCalledNumbers = calledNumbers.map(x => JSON.stringify(x)).join(\"~\");\n    \n    const elem = document.createElement(\"a\");\n    const file = new Blob(\n      [stringedCalledNumbers],\n      {type : \"text/plain\"}\n    );\n    elem.href = URL.createObjectURL(file);\n    elem.download = `rlte-${new Date().toISOString()}.txt`;\n    document.body.appendChild(elem);\n    elem.click();\n  }\n  const loadFile = (e: any) => {\n    if (e.target.files && e.target.files.length > 0) {\n      let file = e.target.files[0];\n      const reader = new FileReader();\n      \n      reader.onload = () => {\n        var loaded = reader.result as string;\n        var split = loaded.split(\"~\");\n        \n        try {\n          var parsed: CalledNumber[] = split.map(x => {\n            var parsedX = JSON.parse(x);\n            return {\n              number: parsedX.number,\n              time: new Date(parsedX.time)\n            }\n          });\n          \n          var array = [...calledNumbers, ...parsed];\n          array.sort((a: CalledNumber, b: CalledNumber) => {\n            return a.time.getTime() - b.time.getTime();\n          });\n\n          array = array.filter((x, idx) => array.map(y => y.time.getTime()).indexOf(x.time.getTime()) === idx);\n          setCalledNumbers(array);\n        } catch (err) {\n          toast({\n            description: \"Invalid file.\",\n            position: \"top\",\n            status: \"error\",\n            duration: 3000,\n            isClosable: true\n          })\n        }\n      }\n      reader.readAsText(file);\n\n    }\n  }\n\n  const importInputRef = createRef<HTMLInputElement>();\n\n  return (\n    <Flex backgroundColor=\"gray.900\" alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Flex paddingX={2} paddingY={4} marginLeft={4}\n        alignItems=\"center\" fontSize=\"2xl\"\n      >\n        <GiCartwheel />\n        <Text ml={2} fontWeight=\"bold\"         \n          color=\"white\" fontSize=\"md\"\n        >\n          RLTE\n        </Text>\n      </Flex>\n\n      <ButtonGroup variant=\"outline\" size=\"sm\" mr={2} colorScheme=\"cyan\">\n        <Button leftIcon={<FaFileImport />}\n          onClick={() => onImport()}\n        >Import</Button>\n        <Input type=\"file\" accept=\"text/plain\"\n          onChange={e => loadFile(e)}\n          ref={importInputRef}\n          display=\"none\"\n        />\n        <Button leftIcon={<FaFileExport />}\n          onClick={() => onExport()}\n        >Export</Button>\n      </ButtonGroup>\n    </Flex>\n\n  )\n}\n\ntype RouletteTableProps = {\n  appendToCalled: (num: RouletteNumber) => void\n}\nconst RouletteTable = ({ appendToCalled }: RouletteTableProps) => {\n  const rouletteNumbers: RouletteNumber[][] = [\n    // Top row\n    [\n      { value: \"00\", color: NumberColor.Green },\n      { value: \"3\", color: NumberColor.Red},\n      { value: \"6\", color: NumberColor.Black},\n      { value: \"9\", color: NumberColor.Red},\n      { value: \"12\", color: NumberColor.Red},\n      { value: \"15\", color: NumberColor.Black},\n      { value: \"18\", color: NumberColor.Red},\n      { value: \"21\", color: NumberColor.Red},\n      { value: \"24\", color: NumberColor.Black},\n      { value: \"27\", color: NumberColor.Red},\n      { value: \"30\", color: NumberColor.Red},\n      { value: \"33\", color: NumberColor.Black},\n      { value: \"36\", color: NumberColor.Red}\n    ],\n\n    // Mid row\n    [\n      { value: \"2\", color: NumberColor.Black},\n      { value: \"5\", color: NumberColor.Red},\n      { value: \"8\", color: NumberColor.Black},\n      { value: \"11\", color: NumberColor.Black},\n      { value: \"14\", color: NumberColor.Red},\n      { value: \"17\", color: NumberColor.Black},\n      { value: \"20\", color: NumberColor.Black},\n      { value: \"23\", color: NumberColor.Red},\n      { value: \"26\", color: NumberColor.Black},\n      { value: \"29\", color: NumberColor.Black},\n      { value: \"32\", color: NumberColor.Red},\n      { value: \"35\", color: NumberColor.Black}\n    ],\n\n    // Bot row\n    [\n      { value: \"0\", color: NumberColor.Green },\n      { value: \"1\", color: NumberColor.Red},\n      { value: \"4\", color: NumberColor.Black},\n      { value: \"7\", color: NumberColor.Red},\n      { value: \"10\", color: NumberColor.Black},\n      { value: \"13\", color: NumberColor.Black},\n      { value: \"16\", color: NumberColor.Red},\n      { value: \"19\", color: NumberColor.Red},\n      { value: \"22\", color: NumberColor.Black},\n      { value: \"25\", color: NumberColor.Red},\n      { value: \"28\", color: NumberColor.Black},\n      { value: \"31\", color: NumberColor.Black},\n      { value: \"34\", color: NumberColor.Red}\n    ]\n  ];\n\n  return (\n    <Flex maxWidth=\"700px\" justifyContent=\"center\" mt={3}>\n      <Grid\n        templateRows=\"repeat(6, 1fr)\"\n        templateColumns=\"repeat(13, 1fr)\"\n        gap={1}\n        height=\"180px\"\n      >\n        {\n          rouletteNumbers.map(x => \n            x.map(y => \n              <GridItem key={y.value === \"00\"\n                ? 37\n                : y.value === \"0\"\n                  ? 38\n                  : y.value\n                } rowSpan={y.value === \"00\" || y.value === \"0\" ? 3 : 2} colSpan={1}\n              >\n                <RouletteNumberButton\n                  number={y}\n                  onClick={appendToCalled}\n                />\n              </GridItem>\n            )\n          )\n        }\n      </Grid>\n    </Flex>\n  )\n}\n\ntype ToolsAccordionProps = {\n  filteredStartDate: Date | undefined,\n  filteredEndDate: Date | undefined,\n  setFilteredStartDate: (newDate: Date | undefined) => void,\n  setFilteredEndDate: (newDate: Date | undefined) => void,\n}\nconst ToolsAccordion = ({ filteredStartDate, filteredEndDate, setFilteredStartDate, setFilteredEndDate }: ToolsAccordionProps) => {\n  const [numberOfBets, setNumberOfBets] = useState<number>(0);\n  const [startingBet, setStartingBet] = useState<number>(0);\n  const totalNeeded = () => {\n    var sum = startingBet;\n    for (var i = 1; i <= numberOfBets; i++) {\n      sum *= 2;\n    }\n\n    return sum - startingBet;\n  }\n\n  const [startDate, setStartDate] = useState<Date | undefined>(undefined);\n  const [endDate, setEndDate] = useState<Date | undefined>(undefined);\n\n  const [isFiltered, setIsFiltered] = useState(false);\n\n  const onClickApply = () => {\n    setFilteredStartDate(startDate);\n    setFilteredEndDate(endDate);\n    setIsFiltered(true);\n  }\n\n  const onClickLastXTime = (minutes: number) => {\n    var closest15Mins = getClosest15Mins(new Date(), \"ceil\");\n    var oneHourAgo = new Date(closest15Mins.getTime() - (minutes * MS_PER_MINUTE));\n\n    setStartDate(oneHourAgo);\n    setEndDate(closest15Mins);\n    setFilteredStartDate(oneHourAgo);\n    setFilteredEndDate(closest15Mins);\n    setIsFiltered(true);\n  }\n\n  const onClickClear = () => {\n    setStartDate(undefined);\n    setEndDate(undefined);\n    setFilteredStartDate(undefined);\n    setFilteredEndDate(undefined);\n    setIsFiltered(false);\n  }\n\n  const getClosest15Mins = (date: Date, type: \"round\" | \"ceil\" | \"floor\") => {\n    var d = _.clone(date);\n    var minutes = date.getMinutes();\n    var hours = date.getHours();\n\n    var m = (Math.floor(minutes/15) * 15) % 60;\n    var h = minutes > 52 ? (hours === 23 ? 0 : hours + 1) : hours;\n    if (type === \"round\") {\n      m = (Math.round(minutes/15) * 15) % 60;\n    } else if (type === \"ceil\") {\n      m = (Math.ceil(minutes/15) * 15) % 60;\n      if (m === 0 && h !== hours + 1) {\n        h = hours + 1;\n      }\n    }\n    else {\n      h = hours;\n    }\n\n    d.setMinutes(m, 0, 0);\n    d.setHours(h);\n    return d;\n  }\n\n  return (\n    <Accordion mt={4} allowMultiple>\n      <AccordionItem>\n        <AccordionButton>\n          <Flex alignItems=\"center\" flex={1}>\n            <FaCalculator />\n            <Text ml={4}>Double Down Calculator</Text>\n          </Flex>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Flex flexDir=\"column\">\n            <Flex display=\"flex\" alignItems=\"center\">\n              <Text minW=\"35px\">I want to be safe for</Text>\n              <Input size=\"lg\" variant=\"flushed\" placeholder=\"#\" type=\"number\"\n                maxW=\"75px\" textAlign=\"center\"\n                mx={2}\n                onChange={(e) => setNumberOfBets(parseInt(e.target.value))}\n              />\n              \n              <Text minW=\"225px\">bets, with a starting bet of</Text>\n              <InputGroup maxW=\"150px\" mx={2} size=\"lg\" >\n                <InputLeftElement\n                  maxW=\"20px\"\n                  pointerEvents='none'\n                  height=\"100%\"\n                  children='$'\n                />\n                <Input variant=\"flushed\" placeholder=\"123456\" type=\"number\"\n                  onChange={(e) => setStartingBet(parseInt(e.target.value))}\n                  textAlign=\"center\"\n                />\n              </InputGroup>\n              <Text>.</Text>\n            </Flex>\n\n            <Flex mt={4} alignItems=\"center\">\n              <Text fontWeight=\"bold\">You will need:</Text>\n              <Text ml={8} fontSize=\"2xl\">${totalNeeded()}</Text>\n            </Flex>\n          </Flex>\n        </AccordionPanel>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionButton>\n          <Flex alignItems=\"center\" flex={1}>\n            <FaCalendar />\n            <Text ml={4}>Filter by Date</Text>\n          </Flex>\n          {\n            isFiltered\n            ? <Flex alignItems=\"center\" mr={2}>\n              {\n                (filteredStartDate && <Tag colorScheme=\"cyan\">{dateToString(filteredStartDate)}</Tag>)\n                || <Tag colorScheme=\"cyan\">No start date</Tag>\n              }\n              <Box mx={2}><BsArrowRight /></Box>\n              {\n                (filteredEndDate && <Tag colorScheme=\"cyan\">{dateToString(filteredEndDate)}</Tag>)\n                || <Tag colorScheme=\"cyan\">No end date</Tag>\n              }\n            </Flex>\n            : null\n          }\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\">\n              <FormLabel mb={0} mr={2} flex={1}>Date Range:</FormLabel>\n              <ReactDatePicker\n                dateFormat=\"dd/MM/yy HH:mm\"\n                selected={startDate}\n                onChange={(date) => setStartDate(date as Date)}\n                selectsStart\n\n                showTimeSelect\n                startDate={startDate}\n                endDate={endDate}\n                maxDate={endDate}\n                \n                timeFormat=\"HH:mm\"\n                timeIntervals={15}\n\n                placeholderText=\"Start Date...\"\n              />\n              <Box flex={0} mx={4}><BsArrowRight /></Box>\n              <ReactDatePicker\n                dateFormat=\"dd/MM/yy HH:mm\"\n                selected={endDate}\n                onChange={(date) => setEndDate(date as Date)}\n                selectsEnd\n\n                showTimeSelect\n                startDate={startDate}\n                endDate={endDate}\n                minDate={startDate}\n\n                timeFormat=\"HH:mm\"\n                timeIntervals={15}\n\n                placeholderText=\"End Date...\"\n              />\n\n              <Button size=\"sm\" colorScheme=\"cyan\" variant=\"outline\" ml={4}\n                onClick={onClickApply} isDisabled={!startDate && !endDate}\n              >\n                Apply\n              </Button>\n            </Flex>\n            <Flex mt={4} alignContent=\"center\">\n              <FormLabel mb={0} mr={2} flex={1} alignSelf=\"center\">Quick Filter:</FormLabel>\n              <ButtonGroup colorScheme=\"cyan\" size=\"sm\" variant=\"outline\">\n                <Button onClick={() => onClickLastXTime(60)}>Last hour</Button>\n                <Button onClick={() => onClickLastXTime(30)}>Last 30 mins</Button>\n                <Button onClick={() => onClickLastXTime(15)}>Last 15 mins</Button>\n                <Button colorScheme=\"red\" onClick={onClickClear}>Clear</Button>\n              </ButtonGroup>\n            </Flex>\n          </Flex>\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n\ntype RecentlyCalledProps = {\n  calledNumbers: CalledNumber[]\n  removeCalledNumber: (number: CalledNumber) => void\n}\nconst RecentlyCalled = ({ calledNumbers, removeCalledNumber }: RecentlyCalledProps) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [activeNumber, setActiveNumber] = useState<CalledNumber>({time: new Date(), number: { value: \"1\", color: NumberColor.Red }});\n  const [showNumber, setShowNumber] = useState(true);\n\n  const onClickHandle = (number: CalledNumber) => {\n    setActiveNumber(number);\n    onOpen();\n  }\n\n  const onDeleteConfirm = (number: CalledNumber) => {\n    removeCalledNumber(number);\n    onClose();\n  }\n\n  return (\n    <>\n    <Flex flexDir=\"column\" mr={2}>\n      <Flex alignItems=\"center\" mb={2} justifyContent=\"space-between\">\n        <Flex alignItems=\"center\">\n          <Heading size=\"md\">Recently Called:</Heading>\n          <Button ml={2}\n            size=\"sm\"\n            onClick={() => setShowNumber(!showNumber)}\n            leftIcon={showNumber ? <FaEyeSlash /> : <FaEye />}\n            mr={2}\n          >\n            Toggle Text\n          </Button>\n        </Flex>\n      </Flex>\n      <Flex border=\"1px solid white\" boxShadow=\"0 0 0 1px white inset\" justifyContent=\"center\"\n        borderRadius=\"md\"\n        h=\"188px\" overflow=\"hidden\"\n      >\n        {\n          calledNumbers.length === 0\n          ? <Flex alignItems=\"center\">\n                <FaInfoCircle />\n                <Text ml={2}>No numbers called.</Text>\n          </Flex>\n          : <Flex overflowY=\"auto\"  flex={1} height=\"inherit\"\n            p={2} border=\"1px solid white\" \n          ><SimpleGrid columns={10} gap={1} flex={1} height=\"0%\" maxH=\"20px\"\n            _after={{\n              content: '\" \"',\n              display: \"block\",\n              width: \"100%\",\n              height: \"25px\",\n              marginTop: \"10px\"\n            }}\n          >\n            {\n              calledNumbers.slice().reverse().map(x => \n                <Button key={x.time.getTime().toString()}\n                  size=\"sm\" height=\"25px\" width=\"26px\"\n                  backgroundColor={getButtonBackgroundColor(x.number.color)}\n                  _hover={{backgroundColor: getButtonHoverBackgroundColor(x.number.color)}}\n                  padding={0}\n                  paddingInlineStart={0}\n                  paddingInlineEnd={0}\n                  minW={0}\n                  onClick={() => onClickHandle(x)}\n                >\n                  {\n                    showNumber ? x.number.value : null\n                  }\n                </Button>\n              )\n            }\n          </SimpleGrid></Flex>\n        }\n      </Flex>\n    </Flex>\n\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>\n          <Flex>\n            <Text>Delete</Text>\n            <Box backgroundColor={getButtonBackgroundColor(activeNumber.number.color)}\n              width=\"35px\" textAlign=\"center\"\n              mx={2} borderRadius=\"md\"\n            >\n              {activeNumber.number.value}\n            </Box>\n            <Text>called at {dateToString(activeNumber.time)}?</Text>\n          </Flex>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalFooter>\n          <ButtonGroup size=\"sm\" justifyContent=\"space-between\">\n            <Button variant=\"ghost\" onClick={onClose}>Cancel</Button>\n            <Button variant=\"outline\" colorScheme=\"red\"\n              leftIcon={<FaTrash />}\n              onClick={() => onDeleteConfirm(activeNumber)}\n            >\n              Delete\n            </Button>\n          </ButtonGroup>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n    </>\n  )\n}\n\ntype StatsTableProps = {\n  calledNumbers: CalledNumber[]\n}\nconst StatsTable = ({ calledNumbers }: StatsTableProps) => {\n  const getCountByColor = (color: NumberColor) => {\n    return calledNumbers.filter(x => x.number.color === color).length;\n  }\n\n  const getCountByModulo = (modulo: number, shouldEqual: number) => {\n    return calledNumbers.filter(x => parseInt(x.number.value) > 0 && parseInt(x.number.value) % modulo === shouldEqual).length;\n  }\n\n  const getCountByRange = (start: number, end: number) => {\n    return calledNumbers.filter(x => parseInt(x.number.value) >= start && parseInt(x.number.value) <= end).length;\n  }\n\n  const getPercentageOfTotal = (count: number) => {\n    return Math.round((count / calledNumbers.length) * 10000) / 100;\n  }\n\n  return (\n    <Flex flex={1} borderLeft=\"1px solid var(--chakra-colors-gray-700)\" margin={0} marginInlineStart=\"0 !important\"\n      paddingX={2} flexDir=\"column\"\n    >\n      <Heading size=\"md\" mb={2} ml={4}>Statistics:</Heading>\n      <Table size=\"sm\">\n        <Thead>\n          <Tr>\n            <Th>Name</Th>\n            <Th isNumeric>Count</Th>\n            <Th isNumeric>% of Total</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          <Tr>\n            <Td>Total</Td>\n            <Td isNumeric>{calledNumbers.length}</Td>\n            <Td isNumeric>-</Td>\n          </Tr>\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex backgroundColor=\"red\" width=\"15px\" height=\"15px\"\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\n                />\n                Red\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByColor(NumberColor.Red)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Red))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex backgroundColor=\"black\" width=\"15px\" height=\"15px\"\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\n                />\n                Black\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByColor(NumberColor.Black)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Black))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex backgroundColor=\"green\" width=\"15px\" height=\"15px\"\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\n                />\n                Green\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByColor(NumberColor.Green)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(NumberColor.Green))} %</Td>\n          </Tr>\n\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"md\" mr={2}>\n                  <BsSquareHalf />\n                </Flex>\n                Even\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(2, 0)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(2, 0))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"md\" mr={2}><BsTriangleHalf /></Flex>\n                Odd\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(2, 1)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(2, 1))} %</Td>\n          </Tr>\n\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"md\" mr={2}><BsCircleHalf /></Flex>\n                1-18\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(1, 18)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(1, 18))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"md\" mr={2} transform=\"rotate(180deg)\"><BsCircleHalf /></Flex>\n                19-36\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(19, 36)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(19, 36))} %</Td>\n          </Tr>\n\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderLeft /></Flex>\n                1st 12\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(1, 12)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(1, 12))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderHorizontal /></Flex>\n                2nd 12\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(13, 24)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(13, 24))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderRight /></Flex>\n                3rd 12\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByRange(25, 36)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(25, 36))} %</Td>\n          </Tr>\n\n          <Tr borderTopWidth={3}>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderTop /></Flex>\n                Top 2 to 1\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(3, 0)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 0))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderVerticle /></Flex>\n                Mid 2 to 1\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(3, 2)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 2))} %</Td>\n          </Tr>\n          <Tr>\n            <Td>\n              <Flex alignItems=\"center\">\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderBottom /></Flex>\n                Bot 2 to 1\n              </Flex>\n            </Td>\n            <Td isNumeric>{getCountByModulo(3, 1)}</Td>\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(3, 1))} %</Td>\n          </Tr>\n\n        </Tbody>\n      </Table>\n    </Flex>\n  )\n}\n\nconst App = () => {\n  const [calledNumbers, setCalledNumbers] = useState<CalledNumber[]>([]);\n\n  const [filteredStartDate, setFilteredStartDate] = useState<Date | undefined>(undefined);\n  const [filteredEndDate, setFilteredEndDate] = useState<Date | undefined>(undefined);\n  \n  const appendToCalled = (number: RouletteNumber) => {\n    var cn: CalledNumber = {\n      time: new Date(),\n      number: number\n    }\n    setCalledNumbers(curr => [...curr, cn]);\n  }\n\n  const removeCalledNumber = (number: CalledNumber) => {\n    var called = _.cloneDeep(calledNumbers);\n    var idxToRemove = called.findIndex(x => x.time.getTime() === number.time.getTime());\n    if (idxToRemove !== -1) {\n      called.splice(idxToRemove, 1);\n\n      setCalledNumbers(called);\n    }\n  }\n\n  const filterCalledByDate = () => {\n    return _.cloneDeep(calledNumbers).filter(x => {\n      var t = x.time.getTime();\n      if (filteredStartDate && filteredStartDate.getTime() > t) {\n        return false;\n      }\n\n      if (filteredEndDate && filteredEndDate.getTime() < t) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return (\n    <Flex flexDir=\"column\" justifyContent=\"center\">\n      <Header\n        calledNumbers={calledNumbers}\n        setCalledNumbers={setCalledNumbers}\n      />\n      <Flex maxWidth=\"800px\" flexDir=\"column\" flex={1} alignSelf=\"center\"\n        padding={4}\n      >\n        <RouletteTable appendToCalled={appendToCalled} />\n        \n        <ToolsAccordion\n          filteredStartDate={filteredStartDate}\n          filteredEndDate={filteredEndDate}\n          setFilteredStartDate={setFilteredStartDate}\n          setFilteredEndDate={setFilteredEndDate}        \n        />\n        \n        <Flex mt={2} flexDir=\"column\">\n          <HStack flex={1} mt={2} alignItems=\"flex-start\">\n            \n            <Flex flexDir=\"column\" flex={1}>\n              <RecentlyCalled\n                calledNumbers={filterCalledByDate()}\n                removeCalledNumber={removeCalledNumber}\n              />\n            </Flex>\n            \n            <StatsTable calledNumbers={filterCalledByDate()} />\n          </HStack>\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, useColorMode } from '@chakra-ui/react';\n\nconst ForceDarkMode = (props: { children: JSX.Element }) => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  useEffect(() => {\n    if (colorMode === \"dark\") return;\n    toggleColorMode();\n  }, [colorMode, toggleColorMode]);\n\n  return props.children;\n}\n\nReactDOM.render(\n  <ChakraProvider>\n    <ForceDarkMode>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    </ForceDarkMode>\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}