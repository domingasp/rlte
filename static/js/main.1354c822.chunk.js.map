{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["NumberColor","rouletteNumbers","value","color","Green","Red","Black","dateToString","date","toLocaleDateString","year","month","day","hour","minute","getButtonBackgroundColor","colorProp","getButtonHoverBackgroundColor","RouletteNumberButton","number","onClick","backgroundColor","_hover","width","height","borderRadius","Header","calledNumbers","setCalledNumbers","toast","useToast","importInputRef","createRef","alignItems","justifyContent","paddingX","paddingY","marginLeft","fontSize","ml","fontWeight","variant","size","mr","colorScheme","leftIcon","current","click","onImport","type","accept","onChange","e","target","files","length","file","reader","FileReader","onload","loaded","result","test","Error","parsed","split","map","x","parsedX","rouletteNumber","reduce","accumulator","concat","find","y","time","Date","parseInt","array","sort","a","b","getTime","filter","idx","indexOf","err","description","position","status","duration","isClosable","readAsText","loadFile","ref","display","stringedCalledNumbers","join","elem","document","createElement","Blob","href","URL","createObjectURL","download","toISOString","body","appendChild","onExport","RouletteTable","appendToCalled","maxWidth","mt","templateRows","templateColumns","gap","rowSpan","colSpan","ToolsAccordion","filteredStartDate","filteredEndDate","setFilteredStartDate","setFilteredEndDate","useState","numberOfBets","setNumberOfBets","startingBet","setStartingBet","undefined","startDate","setStartDate","endDate","setEndDate","isFiltered","setIsFiltered","onClickLastXTime","minutes","closest15Mins","getClosest15Mins","oneHourAgo","d","_","clone","getMinutes","hours","getHours","m","Math","floor","h","round","ceil","setMinutes","setHours","allowMultiple","flex","flexDir","minW","placeholder","maxW","textAlign","mx","pointerEvents","children","sum","i","totalNeeded","flexDirection","mb","dateFormat","selected","selectsStart","showTimeSelect","maxDate","timeFormat","timeIntervals","placeholderText","selectsEnd","minDate","isDisabled","alignContent","alignSelf","RecentlyCalled","removeCalledNumber","useDisclosure","isOpen","onOpen","onClose","activeNumber","setActiveNumber","showNumber","setShowNumber","border","boxShadow","overflow","overflowY","p","columns","maxH","_after","content","marginTop","slice","reverse","padding","paddingInlineStart","paddingInlineEnd","toString","DistributionGraph","CustomGraphTooltip","active","payload","label","val","percentage","ResponsiveContainer","BarChart","data","count","acc","name","amt","fill","stroke","mapCalledNumbersToGraphData","CartesianGrid","vertical","XAxis","dataKey","interval","angle","tick","dx","dy","YAxis","allowDecimals","Bar","Tooltip","StatsTable","getCountByColor","getCountByModulo","modulo","shouldEqual","getCountByRange","start","end","getPercentageOfTotal","borderLeft","margin","marginInlineStart","isNumeric","borderTopWidth","transform","NumberStat","px","py","MaxInARowStats","includeGreen","setIncludeGreen","maxColorsInRow","numbers","cloneDeep","max","currentMax","forEach","maxHalfTableInRow","half","minInRange","maxInRange","maxEvenOddRow","even","App","filterCalledByDate","t","cn","curr","called","idxToRemove","findIndex","splice","my","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ForceDarkMode","props","useColorMode","colorMode","toggleColorMode","useEffect","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1354c822.chunk.js","sourcesContent":["import { Button, Text, Flex, HStack, Box, SimpleGrid, Grid, GridItem, Table, Thead, Td, Tbody, Tr, Th, Heading, ButtonGroup, Accordion, AccordionItem, AccordionButton, AccordionIcon, AccordionPanel, Input, InputGroup, InputLeftElement, useToast, FormLabel, Tag, ModalOverlay, Modal, ModalContent, ModalHeader, useDisclosure, ModalCloseButton, ModalFooter, VStack, Divider, Checkbox } from '@chakra-ui/react';\r\nimport { FaFileImport, FaFileExport, FaEyeSlash, FaEye, FaCalculator, FaInfoCircle, FaCalendar, FaTrash } from \"react-icons/fa\";\r\nimport { GiCartwheel } from \"react-icons/gi\";\r\nimport { BsArrowRight, BsCircleHalf, BsSquareHalf, BsTriangleHalf } from \"react-icons/bs\"\r\nimport { AiOutlineBorderBottom, AiOutlineBorderHorizontal, AiOutlineBorderLeft, AiOutlineBorderRight, AiOutlineBorderTop, AiOutlineBorderVerticle } from \"react-icons/ai\";\r\nimport React, { createRef, useState } from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./react-datepicker.css\";\r\nimport _ from 'lodash';\r\nimport { Bar, BarChart, CartesianGrid, ResponsiveContainer, Tooltip, TooltipProps, XAxis, YAxis } from 'recharts';\r\n\r\nimport \"./recharts.css\"\r\nimport { NameType, ValueType } from 'recharts/types/component/DefaultTooltipContent';\r\n\r\nconst MS_PER_MINUTE = 60000;\r\n\r\n// ####################################\r\n// ## Type Declarations\r\n// ####################################\r\n\r\nenum NumberColor {\r\n  Red,\r\n  Black,\r\n  Green\r\n}\r\n\r\ntype RouletteNumber = {\r\n  value: string,\r\n  color: NumberColor\r\n}\r\n\r\ntype CalledNumber = {\r\n  time: Date,\r\n  number: RouletteNumber\r\n}\r\n\r\ntype BarChartDataType = {\r\n  name: string,\r\n  amt: number,\r\n  fill: string,\r\n  stroke: string\r\n}\r\n\r\nconst rouletteNumbers: RouletteNumber[][] = [\r\n  // Top row\r\n  [\r\n    { value: \"00\", color: NumberColor.Green },\r\n    { value: \"3\", color: NumberColor.Red},\r\n    { value: \"6\", color: NumberColor.Black},\r\n    { value: \"9\", color: NumberColor.Red},\r\n    { value: \"12\", color: NumberColor.Red},\r\n    { value: \"15\", color: NumberColor.Black},\r\n    { value: \"18\", color: NumberColor.Red},\r\n    { value: \"21\", color: NumberColor.Red},\r\n    { value: \"24\", color: NumberColor.Black},\r\n    { value: \"27\", color: NumberColor.Red},\r\n    { value: \"30\", color: NumberColor.Red},\r\n    { value: \"33\", color: NumberColor.Black},\r\n    { value: \"36\", color: NumberColor.Red}\r\n  ],\r\n\r\n  // Mid row\r\n  [\r\n    { value: \"2\", color: NumberColor.Black},\r\n    { value: \"5\", color: NumberColor.Red},\r\n    { value: \"8\", color: NumberColor.Black},\r\n    { value: \"11\", color: NumberColor.Black},\r\n    { value: \"14\", color: NumberColor.Red},\r\n    { value: \"17\", color: NumberColor.Black},\r\n    { value: \"20\", color: NumberColor.Black},\r\n    { value: \"23\", color: NumberColor.Red},\r\n    { value: \"26\", color: NumberColor.Black},\r\n    { value: \"29\", color: NumberColor.Black},\r\n    { value: \"32\", color: NumberColor.Red},\r\n    { value: \"35\", color: NumberColor.Black}\r\n  ],\r\n\r\n  // Bot row\r\n  [\r\n    { value: \"0\", color: NumberColor.Green },\r\n    { value: \"1\", color: NumberColor.Red},\r\n    { value: \"4\", color: NumberColor.Black},\r\n    { value: \"7\", color: NumberColor.Red},\r\n    { value: \"10\", color: NumberColor.Black},\r\n    { value: \"13\", color: NumberColor.Black},\r\n    { value: \"16\", color: NumberColor.Red},\r\n    { value: \"19\", color: NumberColor.Red},\r\n    { value: \"22\", color: NumberColor.Black},\r\n    { value: \"25\", color: NumberColor.Red},\r\n    { value: \"28\", color: NumberColor.Black},\r\n    { value: \"31\", color: NumberColor.Black},\r\n    { value: \"34\", color: NumberColor.Red}\r\n  ]\r\n];\r\n\r\n\r\n// ####################################\r\n// ## Component Declarations\r\n// ####################################\r\n\r\nconst dateToString = (date: Date) => {\r\n  var options: Intl.DateTimeFormatOptions = {\r\n    year: \"2-digit\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\"\r\n  }\r\n  return date.toLocaleDateString(\"en-GB\", options);\r\n}\r\n\r\nconst getButtonBackgroundColor = (colorProp: NumberColor) => {\r\n  return colorProp === NumberColor.Red\r\n    ? \"red\"\r\n    : colorProp === NumberColor.Black\r\n      ? \"black\"\r\n      : \"green\";\r\n}\r\n\r\nconst getButtonHoverBackgroundColor = (colorProp: NumberColor) => {\r\n  return colorProp === NumberColor.Red\r\n    ? \"red.500\"\r\n    : colorProp === NumberColor.Black\r\n      ? \"blackAlpha.600\"\r\n      : \"green.500\";\r\n}\r\n\r\ntype RouletteNumberButtonProps = {\r\n  number: RouletteNumber,\r\n  onClick: (value: RouletteNumber) => void\r\n}\r\nconst RouletteNumberButton = ({number, onClick}: RouletteNumberButtonProps) => {\r\n  return (\r\n    <Button\r\n      backgroundColor={getButtonBackgroundColor(number.color)}\r\n      _hover={{backgroundColor: getButtonHoverBackgroundColor(number.color)}}\r\n      color=\"white\"\r\n      width=\"50px\"\r\n      height=\"100%\"\r\n      borderRadius=\"sm\"\r\n      onClick={() => onClick(number)}\r\n    >\r\n      {number.value}\r\n    </Button>\r\n  )\r\n}\r\n\r\ntype HeaderProps = {\r\n  calledNumbers: CalledNumber[],\r\n  setCalledNumbers: (newCalledNumbers: CalledNumber[]) => void\r\n}\r\nconst Header = ({ calledNumbers, setCalledNumbers }: HeaderProps) => {\r\n  const toast = useToast();\r\n  \r\n  const onImport = () => {\r\n    importInputRef.current?.click();\r\n  }\r\n\r\n  const onExport = () => {\r\n    var stringedCalledNumbers = calledNumbers.map(x => `${x.number.value}:${x.time.getTime()}`).join(\",\");\r\n    \r\n    const elem = document.createElement(\"a\");\r\n    const file = new Blob(\r\n      [stringedCalledNumbers],\r\n      {type : \"text/plain\"}\r\n    );\r\n    elem.href = URL.createObjectURL(file);\r\n    elem.download = `rlte-${new Date().toISOString()}.txt`;\r\n    document.body.appendChild(elem);\r\n    elem.click();\r\n  }\r\n  const loadFile = (e: any) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      let file = e.target.files[0];\r\n      const reader = new FileReader();\r\n      \r\n      reader.onload = () => {\r\n        var loaded = reader.result as string;\r\n        \r\n        try {\r\n          let fileStructureRegex = /^(\\d\\d?:\\d{13},)*(\\d\\d?:\\d{13})$/;\r\n          if (!fileStructureRegex.test(loaded)) {\r\n            throw Error\r\n          }\r\n\r\n          var split = loaded.split(\",\");\r\n          var parsed: CalledNumber[] = split.map(x => {\r\n            var parsedX = x.split(\":\");\r\n            var rouletteNumber = rouletteNumbers.reduce((accumulator, value) => accumulator.concat(value), []).find(y => y.value === parsedX[0]);\r\n            if (!rouletteNumber) {\r\n              rouletteNumber = rouletteNumbers[0][0];\r\n            }\r\n            return {\r\n              number: rouletteNumber,\r\n              time: new Date(parseInt(parsedX[1]))\r\n            }\r\n          });\r\n          \r\n          var array = [...calledNumbers, ...parsed];\r\n          array.sort((a: CalledNumber, b: CalledNumber) => {\r\n            return a.time.getTime() - b.time.getTime();\r\n          });\r\n\r\n          array = array.filter((x, idx) => array.map(y => y.time.getTime()).indexOf(x.time.getTime()) === idx);\r\n          setCalledNumbers(array);\r\n        } catch (err) {\r\n          toast({\r\n            description: \"Invalid file.\",\r\n            position: \"top\",\r\n            status: \"error\",\r\n            duration: 3000,\r\n            isClosable: true\r\n          })\r\n        }\r\n      }\r\n      reader.readAsText(file);\r\n\r\n    }\r\n  }\r\n\r\n  const importInputRef = createRef<HTMLInputElement>();\r\n\r\n  return (\r\n    <Flex backgroundColor=\"gray.900\" alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n    >\r\n      <Flex paddingX={2} paddingY={4} marginLeft={4}\r\n        alignItems=\"center\" fontSize=\"2xl\"\r\n      >\r\n        <GiCartwheel />\r\n        <Text ml={2} fontWeight=\"bold\"         \r\n          color=\"white\" fontSize=\"md\"\r\n        >\r\n          RLTE\r\n        </Text>\r\n      </Flex>\r\n\r\n      <ButtonGroup variant=\"outline\" size=\"sm\" mr={2} colorScheme=\"cyan\">\r\n        <Button leftIcon={<FaFileImport />}\r\n          onClick={() => onImport()}\r\n        >Import</Button>\r\n        <Input type=\"file\" accept=\"text/plain\"\r\n          onChange={e => loadFile(e)}\r\n          ref={importInputRef}\r\n          display=\"none\"\r\n        />\r\n        <Button leftIcon={<FaFileExport />}\r\n          onClick={() => onExport()}\r\n        >Export</Button>\r\n      </ButtonGroup>\r\n    </Flex>\r\n\r\n  )\r\n}\r\n\r\ntype RouletteTableProps = {\r\n  appendToCalled: (num: RouletteNumber) => void\r\n}\r\nconst RouletteTable = ({ appendToCalled }: RouletteTableProps) => {\r\n  return (\r\n    <Flex maxWidth=\"700px\" justifyContent=\"center\" mt={3}>\r\n      <Grid\r\n        templateRows=\"repeat(6, 1fr)\"\r\n        templateColumns=\"repeat(13, 1fr)\"\r\n        gap={1}\r\n        height=\"180px\"\r\n      >\r\n        {\r\n          rouletteNumbers.map(x => \r\n            x.map(y => \r\n              <GridItem key={y.value === \"00\"\r\n                ? 37\r\n                : y.value === \"0\"\r\n                  ? 38\r\n                  : y.value\r\n                } rowSpan={y.value === \"00\" || y.value === \"0\" ? 3 : 2} colSpan={1}\r\n              >\r\n                <RouletteNumberButton\r\n                  number={y}\r\n                  onClick={appendToCalled}\r\n                />\r\n              </GridItem>\r\n            )\r\n          )\r\n        }\r\n      </Grid>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ntype ToolsAccordionProps = {\r\n  filteredStartDate: Date | undefined,\r\n  filteredEndDate: Date | undefined,\r\n  setFilteredStartDate: (newDate: Date | undefined) => void,\r\n  setFilteredEndDate: (newDate: Date | undefined) => void,\r\n}\r\nconst ToolsAccordion = ({ filteredStartDate, filteredEndDate, setFilteredStartDate, setFilteredEndDate }: ToolsAccordionProps) => {\r\n  const [numberOfBets, setNumberOfBets] = useState<number>(0);\r\n  const [startingBet, setStartingBet] = useState<number>(0);\r\n  const totalNeeded = () => {\r\n    var sum = startingBet;\r\n    for (var i = 1; i <= numberOfBets; i++) {\r\n      sum *= 2;\r\n    }\r\n\r\n    return sum - startingBet;\r\n  }\r\n\r\n  const [startDate, setStartDate] = useState<Date | undefined>(undefined);\r\n  const [endDate, setEndDate] = useState<Date | undefined>(undefined);\r\n\r\n  const [isFiltered, setIsFiltered] = useState(false);\r\n\r\n  const onClickApply = () => {\r\n    setFilteredStartDate(startDate);\r\n    setFilteredEndDate(endDate);\r\n    setIsFiltered(true);\r\n  }\r\n\r\n  const onClickLastXTime = (minutes: number) => {\r\n    var closest15Mins = getClosest15Mins(new Date(), \"ceil\");\r\n    var oneHourAgo = new Date(closest15Mins.getTime() - (minutes * MS_PER_MINUTE));\r\n\r\n    setStartDate(oneHourAgo);\r\n    setEndDate(closest15Mins);\r\n    setFilteredStartDate(oneHourAgo);\r\n    setFilteredEndDate(closest15Mins);\r\n    setIsFiltered(true);\r\n  }\r\n\r\n  const onClickClear = () => {\r\n    setStartDate(undefined);\r\n    setEndDate(undefined);\r\n    setFilteredStartDate(undefined);\r\n    setFilteredEndDate(undefined);\r\n    setIsFiltered(false);\r\n  }\r\n\r\n  const getClosest15Mins = (date: Date, type: \"round\" | \"ceil\" | \"floor\") => {\r\n    var d = _.clone(date);\r\n    var minutes = date.getMinutes();\r\n    var hours = date.getHours();\r\n\r\n    var m = (Math.floor(minutes/15) * 15) % 60;\r\n    var h = minutes > 52 ? (hours === 23 ? 0 : hours + 1) : hours;\r\n    if (type === \"round\") {\r\n      m = (Math.round(minutes/15) * 15) % 60;\r\n    } else if (type === \"ceil\") {\r\n      m = (Math.ceil(minutes/15) * 15) % 60;\r\n      if (m === 0 && h !== hours + 1) {\r\n        h = hours + 1;\r\n      }\r\n    }\r\n    else {\r\n      h = hours;\r\n    }\r\n\r\n    d.setMinutes(m, 0, 0);\r\n    d.setHours(h);\r\n    return d;\r\n  }\r\n\r\n  return (\r\n    <Accordion mt={4} allowMultiple>\r\n      <AccordionItem>\r\n        <AccordionButton>\r\n          <Flex alignItems=\"center\" flex={1}>\r\n            <FaCalculator />\r\n            <Text ml={4}>Double Down Calculator</Text>\r\n          </Flex>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Flex flexDir=\"column\">\r\n            <Flex display=\"flex\" alignItems=\"center\">\r\n              <Text minW=\"35px\">I want to be safe for</Text>\r\n              <Input size=\"lg\" variant=\"flushed\" placeholder=\"#\" type=\"number\"\r\n                maxW=\"75px\" textAlign=\"center\"\r\n                mx={2}\r\n                onChange={(e) => setNumberOfBets(parseInt(e.target.value))}\r\n              />\r\n              \r\n              <Text minW=\"225px\">bets, with a starting bet of</Text>\r\n              <InputGroup maxW=\"150px\" mx={2} size=\"lg\" >\r\n                <InputLeftElement\r\n                  maxW=\"20px\"\r\n                  pointerEvents='none'\r\n                  height=\"100%\"\r\n                  children='$'\r\n                />\r\n                <Input variant=\"flushed\" placeholder=\"123456\" type=\"number\"\r\n                  onChange={(e) => setStartingBet(parseInt(e.target.value))}\r\n                  textAlign=\"center\"\r\n                />\r\n              </InputGroup>\r\n              <Text>.</Text>\r\n            </Flex>\r\n\r\n            <Flex mt={4} alignItems=\"center\">\r\n              <Text fontWeight=\"bold\">You will need:</Text>\r\n              <Text ml={8} fontSize=\"2xl\">${totalNeeded()}</Text>\r\n            </Flex>\r\n          </Flex>\r\n        </AccordionPanel>\r\n      </AccordionItem>\r\n      <AccordionItem>\r\n        <AccordionButton>\r\n          <Flex alignItems=\"center\" flex={1}>\r\n            <FaCalendar />\r\n            <Text ml={4}>Filter by Date</Text>\r\n          </Flex>\r\n          {\r\n            isFiltered\r\n            ? <Flex alignItems=\"center\" mr={2}>\r\n              {\r\n                (filteredStartDate && <Tag colorScheme=\"cyan\">{dateToString(filteredStartDate)}</Tag>)\r\n                || <Tag colorScheme=\"cyan\">No start date</Tag>\r\n              }\r\n              <Box mx={2}><BsArrowRight /></Box>\r\n              {\r\n                (filteredEndDate && <Tag colorScheme=\"cyan\">{dateToString(filteredEndDate)}</Tag>)\r\n                || <Tag colorScheme=\"cyan\">No end date</Tag>\r\n              }\r\n            </Flex>\r\n            : null\r\n          }\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Flex flexDirection=\"column\">\r\n            <Flex alignItems=\"center\">\r\n              <FormLabel mb={0} mr={2} flex={1}>Date Range:</FormLabel>\r\n              <ReactDatePicker\r\n                dateFormat=\"dd/MM/yy HH:mm\"\r\n                selected={startDate}\r\n                onChange={(date) => setStartDate(date as Date)}\r\n                selectsStart\r\n\r\n                showTimeSelect\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                maxDate={endDate}\r\n                \r\n                timeFormat=\"HH:mm\"\r\n                timeIntervals={15}\r\n\r\n                placeholderText=\"Start Date...\"\r\n              />\r\n              <Box flex={0} mx={4}><BsArrowRight /></Box>\r\n              <ReactDatePicker\r\n                dateFormat=\"dd/MM/yy HH:mm\"\r\n                selected={endDate}\r\n                onChange={(date) => setEndDate(date as Date)}\r\n                selectsEnd\r\n\r\n                showTimeSelect\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                minDate={startDate}\r\n\r\n                timeFormat=\"HH:mm\"\r\n                timeIntervals={15}\r\n\r\n                placeholderText=\"End Date...\"\r\n              />\r\n\r\n              <Button size=\"sm\" colorScheme=\"cyan\" variant=\"outline\" ml={4}\r\n                onClick={onClickApply} isDisabled={!startDate && !endDate}\r\n              >\r\n                Apply\r\n              </Button>\r\n            </Flex>\r\n            <Flex mt={4} alignContent=\"center\">\r\n              <FormLabel mb={0} mr={2} flex={1} alignSelf=\"center\">Quick Filter:</FormLabel>\r\n              <ButtonGroup colorScheme=\"cyan\" size=\"sm\" variant=\"outline\">\r\n                <Button onClick={() => onClickLastXTime(60)}>Last hour</Button>\r\n                <Button onClick={() => onClickLastXTime(30)}>Last 30 mins</Button>\r\n                <Button onClick={() => onClickLastXTime(15)}>Last 15 mins</Button>\r\n                <Button colorScheme=\"red\" onClick={onClickClear}>Clear</Button>\r\n              </ButtonGroup>\r\n            </Flex>\r\n          </Flex>\r\n        </AccordionPanel>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  )\r\n}\r\n\r\ntype RecentlyCalledProps = {\r\n  calledNumbers: CalledNumber[]\r\n  removeCalledNumber: (number: CalledNumber) => void\r\n}\r\nconst RecentlyCalled = ({ calledNumbers, removeCalledNumber }: RecentlyCalledProps) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [activeNumber, setActiveNumber] = useState<CalledNumber>({time: new Date(), number: { value: \"1\", color: NumberColor.Red }});\r\n  const [showNumber, setShowNumber] = useState(true);\r\n\r\n  const onClickHandle = (number: CalledNumber) => {\r\n    setActiveNumber(number);\r\n    onOpen();\r\n  }\r\n\r\n  const onDeleteConfirm = (number: CalledNumber) => {\r\n    removeCalledNumber(number);\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Flex flexDir=\"column\" mr={2}>\r\n      <Flex alignItems=\"center\" mb={2} justifyContent=\"space-between\">\r\n        <Flex alignItems=\"center\">\r\n          <Heading size=\"md\">Recently Called:</Heading>\r\n          <Button ml={2}\r\n            size=\"sm\"\r\n            onClick={() => setShowNumber(!showNumber)}\r\n            leftIcon={showNumber ? <FaEyeSlash /> : <FaEye />}\r\n            mr={2}\r\n          >\r\n            Toggle Text\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n      <Flex border=\"1px solid white\" boxShadow=\"0 0 0 1px white inset\" justifyContent=\"center\"\r\n        borderRadius=\"md\"\r\n        h=\"188px\" overflow=\"hidden\"\r\n      >\r\n        {\r\n          calledNumbers.length === 0\r\n          ? <Flex alignItems=\"center\">\r\n                <FaInfoCircle />\r\n                <Text ml={2}>No numbers called.</Text>\r\n          </Flex>\r\n          : <Flex overflowY=\"auto\"  flex={1} height=\"inherit\"\r\n            p={2} border=\"1px solid white\" \r\n          ><SimpleGrid columns={10} gap={1} flex={1} height=\"0%\" maxH=\"20px\"\r\n            _after={{\r\n              content: '\" \"',\r\n              display: \"block\",\r\n              width: \"100%\",\r\n              height: \"25px\",\r\n              marginTop: \"10px\"\r\n            }}\r\n          >\r\n            {\r\n              calledNumbers.slice().reverse().map(x => \r\n                <Button key={x.time.getTime().toString()}\r\n                  size=\"sm\" height=\"25px\" width=\"26px\"\r\n                  backgroundColor={getButtonBackgroundColor(x.number.color)}\r\n                  _hover={{backgroundColor: getButtonHoverBackgroundColor(x.number.color)}}\r\n                  padding={0}\r\n                  paddingInlineStart={0}\r\n                  paddingInlineEnd={0}\r\n                  minW={0}\r\n                  onClick={() => onClickHandle(x)}\r\n                >\r\n                  {\r\n                    showNumber ? x.number.value : null\r\n                  }\r\n                </Button>\r\n              )\r\n            }\r\n          </SimpleGrid></Flex>\r\n        }\r\n      </Flex>\r\n    </Flex>\r\n\r\n    <Modal isOpen={isOpen} onClose={onClose}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>\r\n          <Flex>\r\n            <Text>Delete</Text>\r\n            <Box backgroundColor={getButtonBackgroundColor(activeNumber.number.color)}\r\n              width=\"35px\" textAlign=\"center\"\r\n              mx={2} borderRadius=\"md\"\r\n            >\r\n              {activeNumber.number.value}\r\n            </Box>\r\n            <Text>called at {dateToString(activeNumber.time)}?</Text>\r\n          </Flex>\r\n        </ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalFooter>\r\n          <ButtonGroup size=\"sm\" justifyContent=\"space-between\">\r\n            <Button variant=\"ghost\" onClick={onClose}>Cancel</Button>\r\n            <Button variant=\"outline\" colorScheme=\"red\"\r\n              leftIcon={<FaTrash />}\r\n              onClick={() => onDeleteConfirm(activeNumber)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </ButtonGroup>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\ntype DistributionGraphProps = {\r\n  calledNumbers: CalledNumber[]\r\n}\r\nconst DistributionGraph = ({ calledNumbers }: DistributionGraphProps) => {\r\n  const mapCalledNumbersToGraphData = () => {\r\n    var flattenedRouletteNumbers = rouletteNumbers.reduce((accumulator, value) => accumulator.concat(value), [])\r\n    \r\n    var data: BarChartDataType[] = flattenedRouletteNumbers.map(x => {\r\n      var count = calledNumbers.reduce((acc, {number}) => x.value === number.value ? ++acc : acc, 0);\r\n\r\n      return {\r\n        name: x.value,\r\n        amt: count,\r\n        fill: getButtonBackgroundColor(x.color),\r\n        stroke: x.color === NumberColor.Black ? \"var(--chakra-colors-gray-500)\" : \"\"\r\n      };\r\n    });\r\n\r\n    data.sort((a : BarChartDataType, b: BarChartDataType) => {\r\n      return parseInt(a.name) < (parseInt(b.name)) ? -1 : 1;\r\n    });\r\n    \r\n    return data;\r\n  }\r\n\r\n  const CustomGraphTooltip = ({ active, payload, label }: TooltipProps<ValueType, NameType>) => {\r\n    if (active) {\r\n      var rouletteNumber = rouletteNumbers.reduce((accumulator, value) => accumulator.concat(value), []).find(x => x.value === label)!\r\n      var val = payload![0].value!;\r\n      var percentage = Math.round((val as number / calledNumbers.length) * 10000) / 100;\r\n      return (\r\n        <Flex\r\n          color=\"gray.900\"\r\n          backgroundColor=\"gray.300\"\r\n          paddingX={2}\r\n          paddingY={1}\r\n          fontSize=\"sm\"\r\n          fontWeight=\"medium\"\r\n          borderRadius=\"sm\"\r\n          boxShadow=\"md\"\r\n          maxW=\"320px\"\r\n        >\r\n          <Text backgroundColor={getButtonBackgroundColor(rouletteNumber.color)}\r\n            color=\"white\" borderRadius=\"md\" width=\"26px\" textAlign=\"center\"\r\n            mr={2}\r\n          >\r\n            {label}\r\n          </Text>\r\n          <Text mr={2}>Called:</Text>\r\n          <Text>{val} ({percentage}%)</Text>\r\n        </Flex>\r\n      );\r\n    }\r\n  \r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <Flex mt={4} flexDirection=\"column\">\r\n      <Heading size=\"md\" mb={4}>Distribution:</Heading>\r\n      <ResponsiveContainer width=\"96%\" height={250}>\r\n        <BarChart\r\n          width={500}\r\n          height={400}\r\n          data={mapCalledNumbersToGraphData()}\r\n        >\r\n          <CartesianGrid vertical={false} stroke=\"var(--chakra-colors-gray-700)\" />\r\n          <XAxis dataKey=\"name\" stroke=\"var(--chakra-colors-gray-200)\" type={\"category\"} interval={1}\r\n            angle={-90} tick={{ fontSize: 14, dx: -5, dy: 10 }}\r\n          />\r\n          <YAxis allowDecimals={false} width={30} stroke=\"var(--chakra-colors-gray-200)\" />\r\n          <Bar dataKey=\"amt\" />\r\n          <Tooltip content={<CustomGraphTooltip />} />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ntype StatsTableProps = {\r\n  calledNumbers: CalledNumber[]\r\n}\r\nconst StatsTable = ({ calledNumbers }: StatsTableProps) => {\r\n  const getCountByColor = (calledNumbers: CalledNumber[], color: NumberColor) => {\r\n    return calledNumbers.filter(x => x.number.color === color).length;\r\n  }\r\n  \r\n  const getCountByModulo = (calledNumbers: CalledNumber[], modulo: number, shouldEqual: number) => {\r\n    return calledNumbers.filter(x => parseInt(x.number.value) > 0 && parseInt(x.number.value) % modulo === shouldEqual).length;\r\n  }\r\n  \r\n  const getCountByRange = (calledNumbers: CalledNumber[], start: number, end: number) => {\r\n    return calledNumbers.filter(x => parseInt(x.number.value) >= start && parseInt(x.number.value) <= end).length;\r\n  }\r\n  \r\n  const getPercentageOfTotal = (count: number) => {\r\n    return Math.round((count / calledNumbers.length) * 10000) / 100;\r\n  }\r\n\r\n  return (\r\n    <Flex flex={1} borderLeft=\"1px solid var(--chakra-colors-gray-700)\" margin={0} marginInlineStart=\"0 !important\"\r\n      paddingX={2} flexDir=\"column\"\r\n    >\r\n      <Heading size=\"md\" mb={2} ml={4}>Statistics:</Heading>\r\n      <Table size=\"sm\">\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Name</Th>\r\n            <Th isNumeric>Count</Th>\r\n            <Th isNumeric>% of Total</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          <Tr>\r\n            <Td>Total</Td>\r\n            <Td isNumeric>{calledNumbers.length}</Td>\r\n            <Td isNumeric>-</Td>\r\n          </Tr>\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex backgroundColor=\"red\" width=\"15px\" height=\"15px\"\r\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\r\n                />\r\n                Red\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByColor(calledNumbers, NumberColor.Red)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(calledNumbers, NumberColor.Red))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex backgroundColor=\"black\" width=\"15px\" height=\"15px\"\r\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\r\n                />\r\n                Black\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByColor(calledNumbers, NumberColor.Black)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(calledNumbers, NumberColor.Black))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex backgroundColor=\"green\" width=\"15px\" height=\"15px\"\r\n                  mr={2} borderRadius=\"full\" ml=\"1px\"\r\n                />\r\n                Green\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByColor(calledNumbers, NumberColor.Green)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByColor(calledNumbers, NumberColor.Green))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2}>\r\n                  <BsSquareHalf />\r\n                </Flex>\r\n                Even\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 2, 0)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 2, 0))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2}><BsTriangleHalf /></Flex>\r\n                Odd\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 2, 1)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 2, 1))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2}><BsCircleHalf /></Flex>\r\n                1-18\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 1, 18)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 1, 18))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"md\" mr={2} transform=\"rotate(180deg)\"><BsCircleHalf /></Flex>\r\n                19-36\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 19, 36)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 19, 36))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderLeft /></Flex>\r\n                1st 12\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 1, 12)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 1, 12))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderHorizontal /></Flex>\r\n                2nd 12\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 13, 24)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 13, 24))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderRight /></Flex>\r\n                3rd 12\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByRange(calledNumbers, 25, 36)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByRange(calledNumbers, 25, 36))} %</Td>\r\n          </Tr>\r\n\r\n          <Tr borderTopWidth={3}>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderTop /></Flex>\r\n                Top 2 to 1\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 3, 0)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 3, 0))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderVerticle /></Flex>\r\n                Mid 2 to 1\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 3, 2)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 3, 2))} %</Td>\r\n          </Tr>\r\n          <Tr>\r\n            <Td>\r\n              <Flex alignItems=\"center\">\r\n                <Flex fontSize=\"lg\" mr={2} ml=\"-2.5px\"><AiOutlineBorderBottom /></Flex>\r\n                Bot 2 to 1\r\n              </Flex>\r\n            </Td>\r\n            <Td isNumeric>{getCountByModulo(calledNumbers, 3, 1)}</Td>\r\n            <Td isNumeric>{getPercentageOfTotal(getCountByModulo(calledNumbers, 3, 1))} %</Td>\r\n          </Tr>\r\n\r\n        </Tbody>\r\n      </Table>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ntype NumberStatProps = {\r\n  label: string,\r\n  value: number,\r\n  leftIcon?: React.ReactNode\r\n}\r\nconst NumberStat = ({ label, value, leftIcon }: NumberStatProps) => {\r\n  return (\r\n    <HStack border=\"1px solid white\" px={4} py={3} borderRadius=\"md\" flex={1}>\r\n      <HStack maxW=\"128px\" flex={1}>\r\n        <HStack px={3}>\r\n          { leftIcon }\r\n          <Heading size=\"md\" alignSelf=\"flex-start\" fontWeight=\"md\">\r\n            {label}\r\n          </Heading>\r\n        </HStack>\r\n      </HStack>\r\n      <Text fontSize=\"4xl\" flex={1} fontWeight=\"semibold\" textAlign=\"center\">{value}</Text>\r\n    </HStack>\r\n  )\r\n}\r\n\r\ntype MaxInARowStatsProps = {\r\n  calledNumbers: CalledNumber[]\r\n}\r\nconst MaxInARowStats = ({ calledNumbers }: MaxInARowStatsProps) => {\r\n  const [includeGreen, setIncludeGreen] = useState(false);\r\n\r\n  const maxColorsInRow = (color: NumberColor, includeGreen: boolean) => {\r\n    var numbers = _.cloneDeep(calledNumbers);\r\n    \r\n    // Sort\r\n    numbers.sort((a: CalledNumber, b: CalledNumber) => {\r\n      return a.time.getTime() - b.time.getTime();\r\n    });\r\n    \r\n    var max = 0;\r\n    var currentMax = 0;\r\n    numbers.forEach(x => {\r\n      if (x.number.color === color || (includeGreen && x.number.color == NumberColor.Green)) {\r\n        currentMax += 1;\r\n      } else {\r\n        if (currentMax > max) {\r\n          max = currentMax;\r\n        }\r\n\r\n        currentMax = 0;\r\n      }\r\n    });\r\n\r\n    return max;\r\n  }\r\n\r\n  const maxHalfTableInRow = (half: \"1-18\" | \"19-36\", includeGreen: boolean) => {\r\n    var numbers = _.cloneDeep(calledNumbers);\r\n    \r\n    // Sort\r\n    numbers.sort((a: CalledNumber, b: CalledNumber) => {\r\n      return a.time.getTime() - b.time.getTime();\r\n    });\r\n\r\n    const minInRange = half === \"1-18\" ? 1 : 19;\r\n    const maxInRange = half === \"1-18\" ? 18 : 36;\r\n\r\n    var max = 0;\r\n    var currentMax = 0;\r\n    numbers.forEach(x => {\r\n      if ((parseInt(x.number.value) >= minInRange && parseInt(x.number.value) <= maxInRange)\r\n        || (includeGreen && x.number.color == NumberColor.Green)) {\r\n        currentMax += 1;\r\n      } else {\r\n        if (currentMax > max) {\r\n          max = currentMax;\r\n        }\r\n\r\n        currentMax = 0;\r\n      }\r\n    });\r\n\r\n    return max;\r\n  }\r\n\r\n  const maxEvenOddRow = (even: boolean, includeGreen: boolean) => {\r\n    var numbers = _.cloneDeep(calledNumbers);\r\n    \r\n    // Sort\r\n    numbers.sort((a: CalledNumber, b: CalledNumber) => {\r\n      return a.time.getTime() - b.time.getTime();\r\n    });\r\n\r\n    const modulo = 2;\r\n    const shouldEqual = even ? 0 : 1\r\n\r\n    var max = 0;\r\n    var currentMax = 0;\r\n    numbers.forEach(x => {\r\n      if ((parseInt(x.number.value) > 0 && parseInt(x.number.value) % modulo === shouldEqual)\r\n        || (includeGreen && x.number.color == NumberColor.Green)) {\r\n        currentMax += 1;\r\n      } else {\r\n        if (currentMax > max) {\r\n          max = currentMax;\r\n        }\r\n\r\n        currentMax = 0;\r\n      }\r\n    });\r\n\r\n    return max;\r\n  }\r\n\r\n\r\n  return (\r\n    <VStack>\r\n      <HStack mb={4} alignSelf=\"stretch\">\r\n        <Heading size=\"md\" alignSelf=\"flex-start\" flex={1}>Max numbers in a row:</Heading>\r\n        <Checkbox\r\n          size=\"lg\"\r\n          value={\"includeGreen\"}\r\n          onChange={(e) => setIncludeGreen(!includeGreen)}\r\n        >\r\n          <HStack fontSize=\"md\">\r\n            <Text>Include</Text>\r\n            <Flex display=\"inline-flex\" backgroundColor=\"green\" width=\"15px\" height=\"15px\" borderRadius=\"full\" ml=\"1px\" />\r\n            <Text>Green</Text>\r\n          </HStack>\r\n        </Checkbox>\r\n      </HStack>\r\n        <SimpleGrid columns={6} gap={3} flex={1} alignSelf=\"stretch\">\r\n          <GridItem colSpan={3}>\r\n            <NumberStat label=\"Even\" value={maxEvenOddRow(true, includeGreen)}\r\n              leftIcon={<BsSquareHalf size=\"20px\" />}\r\n            />\r\n          </GridItem>\r\n          <GridItem colSpan={3}>\r\n            <NumberStat label=\"Odd\" value={maxEvenOddRow(false, includeGreen)}\r\n              leftIcon={<BsTriangleHalf size=\"20px\" />}\r\n            />\r\n          </GridItem>\r\n\r\n          <GridItem colSpan={2}>\r\n            <NumberStat label=\"Red\" value={maxColorsInRow(NumberColor.Red, includeGreen)}\r\n              leftIcon={<Flex backgroundColor=\"red\" width=\"15px\" height=\"15px\"\r\n                borderRadius=\"full\" ml=\"1px\"\r\n              />}\r\n            />\r\n          </GridItem>\r\n          <GridItem colSpan={2}>\r\n            <NumberStat label=\"Black\" value={maxColorsInRow(NumberColor.Black, includeGreen)}\r\n              leftIcon={<Flex backgroundColor=\"black\" width=\"15px\" height=\"15px\"\r\n                borderRadius=\"full\" ml=\"1px\"\r\n              />}\r\n            />\r\n          </GridItem>\r\n          <GridItem colSpan={2}>\r\n            <NumberStat label=\"Green\" value={maxColorsInRow(NumberColor.Green, includeGreen)}\r\n              leftIcon={<Flex backgroundColor=\"green\" width=\"15px\" height=\"15px\"\r\n                borderRadius=\"full\" ml=\"1px\"\r\n              />}\r\n            />\r\n          </GridItem>\r\n\r\n          <GridItem colSpan={3}>\r\n            <NumberStat label=\"1-18\" value={maxHalfTableInRow(\"1-18\", includeGreen)}\r\n              leftIcon={<BsCircleHalf size=\"20px\" />}\r\n            />\r\n          </GridItem>\r\n          <GridItem colSpan={3}>\r\n            <NumberStat label=\"19-36\" value={maxHalfTableInRow(\"19-36\", includeGreen)}\r\n              leftIcon={<Flex transform=\"rotate(180deg)\"><BsCircleHalf size=\"20px\" /></Flex>}\r\n            />\r\n          </GridItem>\r\n      </SimpleGrid>\r\n    </VStack>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [calledNumbers, setCalledNumbers] = useState<CalledNumber[]>([]);\r\n\r\n  const [filteredStartDate, setFilteredStartDate] = useState<Date | undefined>(undefined);\r\n  const [filteredEndDate, setFilteredEndDate] = useState<Date | undefined>(undefined);\r\n  \r\n  const appendToCalled = (number: RouletteNumber) => {\r\n    var cn: CalledNumber = {\r\n      time: new Date(),\r\n      number: number\r\n    }\r\n    setCalledNumbers(curr => [...curr, cn]);\r\n  }\r\n\r\n  const removeCalledNumber = (number: CalledNumber) => {\r\n    var called = _.cloneDeep(calledNumbers);\r\n    var idxToRemove = called.findIndex(x => x.time.getTime() === number.time.getTime());\r\n    if (idxToRemove !== -1) {\r\n      called.splice(idxToRemove, 1);\r\n\r\n      setCalledNumbers(called);\r\n    }\r\n  }\r\n\r\n  const filterCalledByDate = (): CalledNumber[] => {\r\n    return _.cloneDeep(calledNumbers).filter(x => {\r\n      var t = x.time.getTime();\r\n      if (filteredStartDate && filteredStartDate.getTime() > t) {\r\n        return false;\r\n      }\r\n\r\n      if (filteredEndDate && filteredEndDate.getTime() < t) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Flex flexDir=\"column\" justifyContent=\"center\">\r\n      <Header\r\n        calledNumbers={calledNumbers}\r\n        setCalledNumbers={setCalledNumbers}\r\n      />\r\n      <Flex maxWidth=\"800px\" flexDir=\"column\" flex={1} alignSelf=\"center\"\r\n        padding={4}\r\n      >\r\n        <RouletteTable appendToCalled={appendToCalled} />\r\n        \r\n        <ToolsAccordion\r\n          filteredStartDate={filteredStartDate}\r\n          filteredEndDate={filteredEndDate}\r\n          setFilteredStartDate={setFilteredStartDate}\r\n          setFilteredEndDate={setFilteredEndDate}        \r\n        />\r\n        \r\n        <Flex mt={2} flexDir=\"column\">\r\n          <HStack flex={1} mt={2} alignItems=\"flex-start\">\r\n            \r\n            <Flex flexDir=\"column\" flex={1}>\r\n              <RecentlyCalled\r\n                calledNumbers={filterCalledByDate()}\r\n                removeCalledNumber={removeCalledNumber}\r\n              />\r\n\r\n              <DistributionGraph\r\n                calledNumbers={filterCalledByDate()}\r\n              />\r\n            </Flex>\r\n            \r\n            <StatsTable calledNumbers={filterCalledByDate()} />\r\n          </HStack>\r\n        </Flex>\r\n        <Divider my={4} />\r\n        <MaxInARowStats calledNumbers={calledNumbers} />\r\n\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ChakraProvider, useColorMode } from '@chakra-ui/react';\r\n\r\nconst ForceDarkMode = (props: { children: JSX.Element }) => {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  useEffect(() => {\r\n    if (colorMode === \"dark\") return;\r\n    toggleColorMode();\r\n  }, [colorMode, toggleColorMode]);\r\n\r\n  return props.children;\r\n}\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <ForceDarkMode>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n    </ForceDarkMode>\r\n  </ChakraProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}